/**************************************************************
 * HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 **************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_CONN curHTTP;
extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_date(void);
void HTTPPrint_time(void);
void HTTPPrint_config_imei(void);
void HTTPPrint_config_imei_disabled(void);
void HTTPPrint_config_width(void);
void HTTPPrint_config_height(void);
void HTTPPrint_scan_1(void);
void HTTPPrint_scan_2(void);
void HTTPPrint_scan_3(void);
void HTTPPrint_scan_4(void);
void HTTPPrint_config_hostIP(void);
void HTTPPrint_config_opport(void);
void HTTPPrint_config_alport(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_gprs_1(void);
void HTTPPrint_gprs_2(void);
void HTTPPrint_sim_1(void);
void HTTPPrint_sim_2(void);
void HTTPPrint_sim_3(void);
void HTTPPrint_opwd(void);
void HTTPPrint_npwd(void);
void HTTPPrint_cpwd(void);
void HTTPPrint_reboot(void);
void HTTPPrint_version_main(void);
void HTTPPrint_version_network(void);
void HTTPPrint_version_dipsplay(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000001:
			HTTPIncFile((ROM BYTE*)"configheader.inc");
			break;
        case 0x00000002:
			HTTPPrint_date();
			break;
        case 0x00000003:
			HTTPPrint_time();
			break;
        case 0x00000004:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000005:
			HTTPPrint_config_imei();
			break;
        case 0x00000006:
			HTTPPrint_config_imei_disabled();
			break;
        case 0x00000007:
			HTTPPrint_config_width();
			break;
        case 0x00000008:
			HTTPPrint_config_height();
			break;
        case 0x00000009:
			HTTPPrint_scan_1();
			break;
        case 0x0000000a:
			HTTPPrint_scan_2();
			break;
        case 0x0000000b:
			HTTPPrint_scan_3();
			break;
        case 0x0000000c:
			HTTPPrint_scan_4();
			break;
        case 0x0000000d:
			HTTPPrint_config_hostIP();
			break;
        case 0x0000000e:
			HTTPPrint_config_opport();
			break;
        case 0x0000000f:
			HTTPPrint_config_alport();
			break;
        case 0x00000010:
			HTTPPrint_config_mac();
			break;
        case 0x00000011:
			HTTPPrint_config_ip();
			break;
        case 0x00000012:
			HTTPPrint_config_gw();
			break;
        case 0x00000013:
			HTTPPrint_config_subnet();
			break;
        case 0x00000014:
			HTTPPrint_gprs_1();
			break;
        case 0x00000015:
			HTTPPrint_gprs_2();
			break;
        case 0x00000016:
			HTTPPrint_sim_1();
			break;
        case 0x00000017:
			HTTPPrint_sim_2();
			break;
        case 0x00000018:
			HTTPPrint_sim_3();
			break;
        case 0x00000019:
			HTTPPrint_opwd();
			break;
        case 0x0000001a:
			HTTPPrint_npwd();
			break;
        case 0x0000001b:
			HTTPPrint_cpwd();
			break;
        case 0x0000001c:
			HTTPPrint_reboot();
			break;
        case 0x0000001d:
			HTTPPrint_version_main();
			break;
        case 0x0000001e:
			HTTPPrint_version_network();
			break;
        case 0x0000001f:
			HTTPPrint_version_dipsplay();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
