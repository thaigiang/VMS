MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; *********************************************************************
                      00002 ; *
                      00003 ; *      Big Integer Assembly Helpers
                      00004 ; *  Library for Microchip TCP/IP Stack
                      00005 ; *       - Accelerates processing for BigInt functions
                      00006 ; *
                      00007 ; *********************************************************************
                      00008 ; * FileName:        BigInt_helper.asm
                      00009 ; * Dependencies:    None
                      00010 ; * Processor:       PIC18
                      00011 ; * Compiler:        Microchip C18 v3.30 or higher
                      00012 ; * Company:         Microchip Technology, Inc.
                      00013 ; *
                      00014 ; * Software License Agreement
                      00015 ; *
                      00016 ; * Copyright (C) 2002-2009 Microchip Technology Inc.  All rights
                      00017 ; * reserved.
                      00018 ; *
                      00019 ; * Microchip licenses to you the right to use, modify, copy, and
                      00020 ; * distribute:
                      00021 ; * (i)  the Software when embedded on a Microchip microcontroller or
                      00022 ; *      digital signal controller product ("Device") which is
                      00023 ; *      integrated into Licensee's product; or
                      00024 ; * (ii) ONLY the Software driver source files ENC28J60.c, ENC28J60.h,
                      00025 ; *             ENCX24J600.c and ENCX24J600.h ported to a non-Microchip device
                      00026 ; *             used in conjunction with a Microchip ethernet controller for
                      00027 ; *             the sole purpose of interfacing with the ethernet controller.
                      00028 ; *
                      00029 ; * You should refer to the license agreement accompanying this
                      00030 ; * Software for additional information regarding your rights and
                      00031 ; * obligations.
                      00032 ; *
                      00033 ; * THE SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT
                      00034 ; * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
                      00035 ; * LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A
                      00036 ; * PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
                      00037 ; * MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
                      00038 ; * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
                      00039 ; * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
                      00040 ; * BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE
                      00041 ; * THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER
                      00042 ; * SIMILAR COSTS, WHETHER ASSERTED ON THE BASIS OF CONTRACT, TORT
                      00043 ; * (INCLUDING NEGLIGENCE), BREACH OF WARRANTY, OR OTHERWISE.
                      00044 ; *
                      00045 ; *
                      00046 ; * Author               Date           Comment
                      00047 ; *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00048 ; * Elliott Wood             06/20/07   Original
                      00049 ; * Howard Schlunder     11/15/07       Converted to little endian
                      00050 ; ********************************************************************/
                      00051  
                      00052 BIGINT_VARS             udata
  0000                00053         global _iA
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00054         global _iB
  0000                00055         global _iBr             ;  when B is a ROM pointer
  0000                00056         global _iR
  0000                00057         global _xA
  0000                00058         global _xB
  0000                00059         global _xBr             ;  when B is a ROM pointer
  0000                00060         global _wC
000000                00061 _iA                     res     2       ;*_iA, starting pointer for A (low address)
000002                00062 _xA                     res     2       ;*_xA, end pointer for A (high address)
000004                00063 _iB                     res 2   ;*_iB, starting pointer for B (low address)
000006                00064 _xB                     res     2       ;*_xB, end pointer for B (high address)
000008                00065 _iBr            res     3       ;*_iBr, starting pointer for B in ROM (low address)
00000B                00066 _xBr            res     3       ;*_xBr, end pointer for B in ROM (high address)
00000E                00067 _iR                     res     2       ;*_iR, starting pointer for multiplication Result (low address)
000010                00068 _wC                     res 1   ;Value of C for _masBI (scalar) and _mul (temp storage)
                      00069 
000011                00070 CarryByte       res 1   ;Value of carry for _mul and _sqr (scalar)
000012                00071 CarryH          res 1   ;High value of carry for _sqr (scalar)
                      00072 
                      00073 BIGINT_CODE             code
                      00074 
                      00075 #include p18cxxx.inc
                      00001         LIST
                      00002 ; P18CXXX.INC  Standard Header File, Microchip Technology, Inc.
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F97J60 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2009 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      02064         LIST
                      00726   ENDIF
                      00727   IFDEF __18LF13K22
                      00728      INCLUDE <p18LF13K22.INC>
                      00729   ENDIF
                      00730   IFDEF __18LF13K50
                      00731      INCLUDE <p18LF13K50.INC>
                      00732   ENDIF
                      00733   IFDEF __18LF14K22
                      00734      INCLUDE <p18LF14K22.INC>
                      00735   ENDIF
                      00736   IFDEF __18LF14K50
                      00737      INCLUDE <p18LF14K50.INC>
                      00738   ENDIF
                      00739   IFDEF __18LF23K22
                      00740      INCLUDE <p18LF23K22.INC>
                      00741   ENDIF
                      00742   IFDEF __18LF24J11
                      00743      INCLUDE <p18LF24J11.INC>
                      00744   ENDIF
                      00745   IFDEF __18LF24J50
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00746      INCLUDE <p18LF24J50.INC>
                      00747   ENDIF
                      00748   IFDEF __18LF24K22
                      00749      INCLUDE <p18LF24K22.INC>
                      00750   ENDIF
                      00751   IFDEF __18LF25J11
                      00752      INCLUDE <p18LF25J11.INC>
                      00753   ENDIF
                      00754   IFDEF __18LF25J50
                      00755      INCLUDE <p18LF25J50.INC>
                      00756   ENDIF
                      00757   IFDEF __18LF25K22
                      00758      INCLUDE <p18LF25K22.INC>
                      00759   ENDIF
                      00760   IFDEF __18LF25K80
                      00761      INCLUDE <p18LF25K80.INC>
                      00762   ENDIF
                      00763   IFDEF __18LF26J11
                      00764      INCLUDE <p18LF26J11.INC>
                      00765   ENDIF
                      00766   IFDEF __18LF26J13
                      00767      INCLUDE <p18LF26J13.INC>
                      00768   ENDIF
                      00769   IFDEF __18LF26J50
                      00770      INCLUDE <p18LF26J50.INC>
                      00771   ENDIF
                      00772   IFDEF __18LF26J53
                      00773      INCLUDE <p18LF26J53.INC>
                      00774   ENDIF
                      00775   IFDEF __18LF26K22
                      00776      INCLUDE <p18LF26K22.INC>
                      00777   ENDIF
                      00778   IFDEF __18LF26K80
                      00779      INCLUDE <p18LF26K80.INC>
                      00780   ENDIF
                      00781   IFDEF __18LF27J13
                      00782      INCLUDE <p18LF27J13.INC>
                      00783   ENDIF
                      00784   IFDEF __18LF27J53
                      00785      INCLUDE <p18LF27J53.INC>
                      00786   ENDIF
                      00787   IFDEF __18LF43K22
                      00788      INCLUDE <p18LF43K22.INC>
                      00789   ENDIF
                      00790   IFDEF __18LF44J11
                      00791      INCLUDE <p18LF44J11.INC>
                      00792   ENDIF
                      00793   IFDEF __18LF44J50
                      00794      INCLUDE <p18LF44J50.INC>
                      00795   ENDIF
                      00796   IFDEF __18LF44K22
                      00797      INCLUDE <p18LF44K22.INC>
                      00798   ENDIF
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00799   IFDEF __18LF45J11
                      00800      INCLUDE <p18LF45J11.INC>
                      00801   ENDIF
                      00802   IFDEF __18LF45J50
                      00803      INCLUDE <p18LF45J50.INC>
                      00804   ENDIF
                      00805   IFDEF __18LF45K22
                      00806      INCLUDE <p18LF45K22.INC>
                      00807   ENDIF
                      00808   IFDEF __18LF45K80
                      00809      INCLUDE <p18LF45K80.INC>
                      00810   ENDIF
                      00811   IFDEF __18LF46J11
                      00812      INCLUDE <p18LF46J11.INC>
                      00813   ENDIF
                      00814   IFDEF __18LF46J13
                      00815      INCLUDE <p18LF46J13.INC>
                      00816   ENDIF
                      00817   IFDEF __18LF46J50
                      00818      INCLUDE <p18LF46J50.INC>
                      00819   ENDIF
                      00820   IFDEF __18LF46J53
                      00821      INCLUDE <p18LF46J53.INC>
                      00822   ENDIF
                      00823   IFDEF __18LF46K22
                      00824      INCLUDE <p18LF46K22.INC>
                      00825   ENDIF
                      00826   IFDEF __18LF46K80
                      00827      INCLUDE <p18LF46K80.INC>
                      00828   ENDIF
                      00829   IFDEF __18LF47J13
                      00830      INCLUDE <p18LF47J13.INC>
                      00831   ENDIF
                      00832   IFDEF __18LF47J53
                      00833      INCLUDE <p18LF47J53.INC>
                      00834   ENDIF
                      00835   IFDEF __18LF65K80
                      00836      INCLUDE <p18LF65K80.INC>
                      00837   ENDIF
                      00838   IFDEF __18LF66K80
                      00839      INCLUDE <p18LF66K80.INC>
                      00840   ENDIF
                      00841   IFDEF __MCV20USB
                      00842      INCLUDE <pMCV20USB.INC>
                      00843   ENDIF
                      00844 
                      00076 #include P18MACRO.INC
                      00001 ; $Id: P18MACRO.INC,v 1.1 2003/12/17 19:32:43 sealep Exp $
                      00002 
                      00003 ;==========================================================================
                      00004 ;
                      00005 ;         MACROS
                      00006 ;
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 ;==========================================================================
                      00008         LIST
                      00009 
                      00010 
                      00011 StkSetPtrToOffset macro Ptr,Offset
                      00012   ; Set pointer Ptr to argument in stack frame at Offset.
                      00013           movlw     LOW(Offset)
                      00014           addwf     FSR1L,W,ACCESS
                      00015           movwf     Ptr,ACCESS
                      00016           movlw     HIGH(Offset&0xFFFF)
                      00017           addwfc    FSR1H,W,ACCESS
                      00018           movwf     Ptr+1
                      00019  endm
                      00020 
                      00021 
                      00022 StkPushPtrToOffset macro Offset
                      00023   ; Push pointer onto stack to point to Offset location in stack.
                      00024   ; Offset defined before push.
                      00025           movlw     LOW(Offset)
                      00026           addwf     FSR1L,W,ACCESS
                      00027           movwf     INDF1,ACCESS
                      00028           movlw     HIGH(Offset&0xFFFF)
                      00029           addwfc    FSR1H,W,ACCESS
                      00030           movwf     PREINC1,ACCESS
                      00031           movf      POSTINC1,F,ACCESS     ; increment FSR1
                      00032  endm
                      00033 
                      00034 
                      00035 
                      00036 StkAddStackPtr macro N
                      00037   ; Add N to FSR1
                      00038           movlw     LOW(N)
                      00039           addwf     FSR1L,F,ACCESS
                      00040           movlw     HIGH(N&0xFFFF)
                      00041           addwfc    FSR1H,F,ACCESS
                      00042  endm
                      00043 
                      00044 
                      00045 Stk1PushFromFSR0 macro
                      00046   ; Get one byte from FSR0 and push on stack.  FSR0, WREG unchanged.
                      00047           movff     INDF0,POSTINC1
                      00048  endm
                      00049 
                      00050 Stk2PushFromFSR0 macro
                      00051   ; Get two bytes from FSR0 and push on stack. FSR0, WREG unchanged.
                      00052           movff     POSTINC0,POSTINC1
                      00053           movff     POSTDEC0,POSTINC1
                      00054  endm
                      00055 
                      00056 Stk3PushFromFSR0 macro
                      00057   ; Get three bytes from FSR0 and push on stack. FSR0, WREG unchanged.
                      00058           movff     POSTINC0,POSTINC1
                      00059           movff     POSTINC0,POSTINC1
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00060           movff     POSTDEC0,POSTINC1
                      00061           movf      POSTDEC0,F,ACCESS
                      00062  endm
                      00063 
                      00064 
                      00065 
                      00066 Stk1PushFromFSR2 macro
                      00067   ; Get one byte from FSR2 and push on stack.  FSR2, WREG unchanged.
                      00068           movff     INDF2,POSTINC1
                      00069  endm
                      00070 
                      00071 Stk2PushFromFSR2 macro
                      00072   ; Get two bytes from FSR2 and push on stack. FSR2, WREG unchanged.
                      00073           movff     POSTINC2,POSTINC1
                      00074           movff     POSTDEC2,POSTINC1
                      00075  endm
                      00076 
                      00077 Stk3PushFromFSR2 macro
                      00078   ; Get three bytes from FSR2 and push on stack. FSR2, WREG unchanged.
                      00079           movff     POSTINC2,POSTINC1
                      00080           movff     POSTINC2,POSTINC1
                      00081           movff     POSTDEC2,POSTINC1
                      00082           movf      POSTDEC2,F,ACCESS
                      00083  endm
                      00084 
                      00085 
                      00086 Stk1PushFromReg macro Reg
                      00087   ; Get one byte from Reg and push on stack.  WREG unchanged.
                      00088           movff     Reg,POSTINC1
                      00089  endm
                      00090 
                      00091 Stk2PushFromReg macro Reg
                      00092   ; Get two bytes from Reg and push on stack.  WREG unchanged.
                      00093           movff     Reg,POSTINC1
                      00094           movff     Reg+1,POSTINC1
                      00095  endm
                      00096 
                      00097 
                      00098 Stk3PushFromReg macro Reg
                      00099   ; Get three bytes from Reg and push on stack.  WREG unchanged.
                      00100           movff     Reg,POSTINC1
                      00101           movff     Reg+1,POSTINC1
                      00102           movff     Reg+2,POSTINC1
                      00103  endm
                      00104 
                      00105 
                      00106 Stk1PopToFSR0 macro
                      00107   ; Pop one byte from stack and put it at FSR0 without exposing stack.
                      00108   ; WREG changed, FSR0 unchanged.
                      00109           movlw     0xFF
                      00110           movff     PLUSW1,INDF0
                      00111           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00112  endm
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00113 
                      00114 
                      00115 Stk2PopToFSR0 macro
                      00116   ; Pop two bytes from stack and put them at FSR0 without exposing stack.
                      00117   ; WREG changed, FSR0 unchanged.
                      00118           movlw     0xFE
                      00119           movff     PLUSW1,POSTINC0
                      00120           movlw     0xFF
                      00121           movff     PLUSW1,POSTDEC0
                      00122           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00123           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00124  endm
                      00125 
                      00126 Stk3PopToFSR0 macro
                      00127   ; Pop three bytes from stack and put them at FSR0 without exposing stack.
                      00128   ; WREG changed, FSR0 unchanged.
                      00129           movlw     0xFD
                      00130           movff     PLUSW1,POSTINC0
                      00131           movlw     0xFE
                      00132           movff     PLUSW1,POSTINC0
                      00133           movlw     0xFF
                      00134           movff     PLUSW1,POSTDEC0
                      00135           movf      POSTDEC0,F,ACCESS     ; restore FSR0
                      00136           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00137           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00138           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00139  endm
                      00140 
                      00141 
                      00142 Stk1PopToFSR2 macro
                      00143   ; Pop one byte from stack and put it at FSR2 without exposing stack.
                      00144   ; WREG changed, FSR2 unchanged.
                      00145           movlw     0xFF
                      00146           movff     PLUSW1,INDF2
                      00147           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00148  endm
                      00149 
                      00150 
                      00151 Stk2PopToFSR2 macro
                      00152   ; Pop two bytes from stack and put them at FSR2 without exposing stack.
                      00153   ; WREG changed, FSR2 unchanged.
                      00154           movlw     0xFE
                      00155           movff     PLUSW1,POSTINC2
                      00156           movlw     0xFF
                      00157           movff     PLUSW1,POSTDEC2
                      00158           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00159           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00160  endm
                      00161 
                      00162 Stk3PopToFSR2 macro
                      00163   ; Pop three bytes from stack and put them at FSR2 without exposing stack.
                      00164   ; WREG changed, FSR2 unchanged.
                      00165           movlw     0xFD
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00166           movff     PLUSW1,POSTINC2
                      00167           movlw     0xFE
                      00168           movff     PLUSW1,POSTINC2
                      00169           movlw     0xFF
                      00170           movff     PLUSW1,POSTDEC2
                      00171           movf      POSTDEC2,F,ACCESS     ; restore FSR2
                      00172           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00173           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00174           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00175  endm
                      00176 
                      00177 
                      00178 Stk1PopToReg macro Reg
                      00179   ; Pop one byte from stack and put it at Reg without exposing stack.
                      00180   ; WREG changed.
                      00181           movlw     0xFF
                      00182           movff     PLUSW1,Ptr
                      00183           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00184  endm
                      00185 
                      00186 
                      00187 
                      00188 Stk2PopToReg macro Reg
                      00189   ; Pop two bytes from stack and put them at Reg without exposing stack.
                      00190   ; WREG changed.
                      00191           movlw     0xFF
                      00192           movff     PLUSW1,Reg+1
                      00193           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00194           movlw     0xFF
                      00195           movff     PLUSW1,Reg
                      00196           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00197  endm
                      00198 
                      00199 Stk3PopToReg macro Reg
                      00200   ; Pop three bytes from stack and put them at Reg without exposing stack.
                      00201   ; WREG changed.
                      00202           movlw     0xFF
                      00203           movff     PLUSW1,Reg+2
                      00204           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00205           movlw     0xFF
                      00206           movff     PLUSW1,Reg+1
                      00207           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00208           movlw     0xFF
                      00209           movff     PLUSW1,Reg
                      00210           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00211  endm
                      00212 
                      00213 
                      00214 
                      00215 Stk1CpyToFSR0 macro Offset
                      00216   ; Copy one byte from stack frame at Offset to FSR0
                      00217   ; WREG changed, FSR0 unchanged.
                      00218           movlw     LOW(Offset)
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00219           movff     PLUSW1,INDF0
                      00220  endm
                      00221 
                      00222 
                      00223 Stk2CpyToFSR0 macro Offset
                      00224   ; Copy two bytes from stack frame at Offset to FSR0
                      00225   ; WREG changed, FSR0 unchanged.
                      00226           movlw     LOW(Offset)
                      00227           movff     PLUSW1,POSTINC0
                      00228           movlw     LOW(Offset+1)
                      00229           movff     PLUSW1,POSTDEC0
                      00230  endm
                      00231 
                      00232 
                      00233 Stk1CpyToFSR2 macro Offset
                      00234   ; Copy one byte from stack frame at Offset to FSR2
                      00235   ; WREG changed, FSR2 unchanged.
                      00236           movlw     LOW(Offset)
                      00237           movff     PLUSW1,INDF2
                      00238  endm
                      00239 
                      00240 
                      00241 Stk2CpyToFSR2 macro Offset
                      00242   ; Copy two bytes from stack frame at Offset to FSR2
                      00243   ; WREG changed, FSR2 unchanged.
                      00244           movlw     LOW(Offset)
                      00245           movff     PLUSW1,POSTINC2
                      00246           movlw     LOW(Offset+1)
                      00247           movff     PLUSW1,POSTDEC2
                      00248  endm
                      00249 
                      00250 Stk4CpyToFSR2 macro Offset
                      00251   ; Copy four bytes from stack frame at Offset to FSR2
                      00252   ; WREG changed, FSR2 unchanged.
                      00253           movlw     LOW(Offset)
                      00254           movff     PLUSW1,POSTINC2
                      00255           movlw     LOW(Offset+1)
                      00256           movff     PLUSW1,POSTINC2
                      00257           movlw     LOW(Offset+2)
                      00258           movff     PLUSW1,POSTINC2
                      00259           movlw     LOW(Offset+3)
                      00260           movff     PLUSW1,POSTDEC2
                      00261           movf      POSTDEC2,F,ACCESS
                      00262           movf      POSTDEC2,F,ACCESS
                      00263  endm
                      00264 
                      00265 
                      00266 Stk1CpyToReg macro Offset,Reg
                      00267   ; Copy one byte from stack frame at Offset to Reg
                      00268           movlw     LOW(Offset)
                      00269           movff     PLUSW1,Reg
                      00270  endm
                      00271 
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00272 
                      00273 Stk2CpyToReg macro Offset,Reg
                      00274   ; Copy two bytes from stack frame at Offset to Reg
                      00275           movlw     LOW(Offset)
                      00276           movff     PLUSW1,Reg
                      00277           movlw     LOW(Offset+1)
                      00278           movff     PLUSW1,Reg+1
                      00279  endm
                      00280 
                      00281 
                      00282 Stk3CpyToReg macro Offset,Reg
                      00283   ; Copy three bytes from stack frame at Offset to Reg
                      00284           movlw     LOW(Offset)
                      00285           movff     PLUSW1,Reg
                      00286           movlw     LOW(Offset+1)
                      00287           movff     PLUSW1,Reg+1
                      00288           movlw     LOW(Offset+2)
                      00289           movff     PLUSW1,Reg+2
                      00290  endm
                      00291 
                      00292 
                      00293 
                      00294 Stk1CpyFromFSR0 macro Offset
                      00295   ; Copy one byte from FSR0 to stack frame at Offset
                      00296           movlw     LOW(Offset)
                      00297           movff     INDF0,PLUSW1
                      00298  endm
                      00299 
                      00300 
                      00301 Stk2CpyFromFSR0 macro Offset
                      00302   ; Copy two bytes from FSR0 to stack frame at Offset
                      00303           movlw     Offset
                      00304           movff     POSTINC0,PLUSW1
                      00305           movlw     Offset+1
                      00306           movff     POSTDEC0,PLUSW1
                      00307  endm
                      00308 
                      00309 
                      00310 Stk3CpyFromFSR0 macro Offset
                      00311   ; Copy three bytes from FSR0 to stack frame at Offset
                      00312           movlw     Offset
                      00313           movff     POSTINC0,PLUSW1
                      00314           movlw     Offset+1
                      00315           movff     POSTDEC0,PLUSW1
                      00316           movlw     Offset+2
                      00317           movff     POSTDEC0,PLUSW1
                      00318  endm
                      00319 
                      00320 
                      00321 Stk4CpyFromFSR0 macro Offset
                      00322   ; Copy four bytes from FSR0 to stack frame at Offset
                      00323           movlw     Offset
                      00324           movff     POSTINC0,PLUSW1
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00325           movlw     Offset+1
                      00326           movff     POSTINC0,PLUSW1
                      00327           movlw     Offset+2
                      00328           movff     POSTINC0,PLUSW1
                      00329           movlw     Offset+3
                      00330           movff     POSTDEC0,PLUSW1
                      00331           movf      POSTDEC0,F,ACCESS
                      00332           movf      POSTDEC0,F,ACCESS
                      00333  endm
                      00334 
                      00335 
                      00336 
                      00337 Stk1CpyFromFSR2 macro Offset
                      00338   ; Copy one byte from FSR2 to stack frame at Offset
                      00339           movlw     LOW(Offset)
                      00340           movff     INDF2,PLUSW1
                      00341  endm
                      00342 
                      00343 
                      00344 Stk2CpyFromFSR2 macro Offset
                      00345   ; Copy two bytes from FSR2 to stack frame at Offset
                      00346           movlw     Offset
                      00347           movff     POSTINC2,PLUSW1
                      00348           movlw     Offset+1
                      00349           movff     POSTDEC2,PLUSW1
                      00350  endm
                      00351 
                      00352 
                      00353 Stk4CpyFromFSR2 macro Offset
                      00354   ; Copy four bytes from FSR2 to stack frame at Offset
                      00355           movlw     Offset
                      00356           movff     POSTINC2,PLUSW1
                      00357           movlw     Offset+1
                      00358           movff     POSTINC2,PLUSW1
                      00359           movlw     Offset+2
                      00360           movff     POSTINC2,PLUSW1
                      00361           movlw     Offset+3
                      00362           movff     POSTDEC2,PLUSW1
                      00363           movf      POSTDEC2,F,ACCESS
                      00364           movf      POSTDEC2,F,ACCESS
                      00365  endm
                      00366 
                      00367 
                      00368 
                      00369 
                      00370 Stk1CpyFromReg macro Reg,Offset
                      00371   ; Copy one byte from Reg to stack frame at Offset
                      00372           movlw     LOW(Offset)
                      00373           movff     Reg,PLUSW1
                      00374  endm
                      00375 
                      00376 
                      00377 Stk2CpyFromReg macro Reg,Offset
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00378   ; Copy two bytes from Reg to stack frame at Offset
                      00379           movlw     Offset
                      00380           movff     Reg,PLUSW1
                      00381           movlw     Offset+1
                      00382           movff     Reg+1,PLUSW1
                      00383  endm
                      00384 
                      00385 
                      00386 Stk3CpyFromReg macro Reg,Offset
                      00387   ; Copy three bytes from Reg to stack frame at Offset
                      00388           movlw     Offset
                      00389           movff     Reg,PLUSW1
                      00390           movlw     Offset+1
                      00391           movff     Reg+1,PLUSW1
                      00392           movlw     Offset+2
                      00393           movff     Reg+2,PLUSW1
                      00394  endm
                      00395 
                      00396 
                      00397 
                      00398 
                      00399 Stk1Inc macro Offset
                      00400   ; Increment byte in stack at Offset
                      00401           movlw     Offset
                      00402           incf      PLUSW1,F,ACCESS
                      00403  endm
                      00404 
                      00405 
                      00406 Stk2Inc macro Offset
                      00407   ; Increment 2 bytes in stack at Offset
                      00408           movlw     Offset
                      00409           incf      PLUSW1,F,ACCESS
                      00410           movlw     Offset+1
                      00411         btfsc     STATUS,Z
                      00412           incf      PLUSW1,F,ACCESS
                      00413  endm
                      00414 
                      00415 
                      00416 Stk3Inc macro Offset
                      00417   ; Increment 3 bytes in stack at Offset
                      00418           local jEnd
                      00419           movlw     Offset
                      00420           incf      PLUSW1,F,ACCESS
                      00421           bnz       jEnd
                      00422           movlw     Offset+1
                      00423           incf      PLUSW1,F,ACCESS
                      00424           bnz       jEnd
                      00425           movlw     Offset+2
                      00426           incf      PLUSW1,F,ACCESS
                      00427 jEnd:
                      00428  endm
                      00429 
                      00430 
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00431 
                      00432 Stk1Dec macro Offset
                      00433   ; Decrement byte in stack at Offset
                      00434           movlw     Offset
                      00435           decf      PLUSW1,F,ACCESS
                      00436  endm
                      00437 
                      00438 
                      00439 Stk2Dec macro Offset
                      00440   ; Decrement 2 bytes in stack at Offset
                      00441           local jEnd
                      00442           movlw     Offset
                      00443           decf      PLUSW1,F,ACCESS
                      00444           bc        jEnd
                      00445           movlw     Offset+1
                      00446           decf      PLUSW1,F,ACCESS
                      00447 jEnd:
                      00448  endm
                      00449 
                      00450 Stk3Dec macro Offset
                      00451   ; Decrement 3 bytes in stack at Offset
                      00452           local jEnd
                      00453           movlw     Offset
                      00454           decf      PLUSW1,F,ACCESS
                      00455           bc        jEnd
                      00456           movlw     Offset+1
                      00457           decf      PLUSW1,F,ACCESS
                      00458           bc        jEnd
                      00459           movlw     Offset+2
                      00460           decf      PLUSW1,F,ACCESS
                      00461 jEnd:
                      00462  endm
                      00463 
                      00464 
                      00465 Stk1TestForZero macro Offset,jZero
                      00466   ; Test 1 byte at Offset.  Branch if zero.  Returns 0 in WREG if zero.
                      00467           movlw     Offset
                      00468           movf      PLUSW1,W,ACCESS
                      00469           bz        jZero
                      00470  endm
                      00471 
                      00472 
                      00473 Stk2TestForZero macro Offset,jZero
                      00474   ; Test 2 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.
                      00475           local     jContinue
                      00476           movlw     Offset
                      00477           movf      PLUSW1,W,ACCESS
                      00478           bnz       jContinue
                      00479           movlw     Offset+1
                      00480           movf      PLUSW1,W,ACCESS
                      00481           bz        jZero
                      00482 jContinue
                      00483  endm
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00484 
                      00485 
                      00486 Stk3TestForZero macro Offset,jZero
                      00487   ; Test 3 bytes at Offset.  Branch if zero.  Returns 0 in WREG if zero.
                      00488           local     jContinue
                      00489           movlw     Offset
                      00490           movf      PLUSW1,W,ACCESS
                      00491           bnz       jContinue
                      00492           movlw     Offset+1
                      00493           movf      PLUSW1,W,ACCESS
                      00494           bnz       jContinue
                      00495           movlw     Offset+2
                      00496           movf      PLUSW1,W,ACCESS
                      00497           bz        jZero
                      00498 jContinue
                      00499  endm
                      00500 
                      00501 Stk1AddToFSR0 macro Offset
                      00502   ; Add 1 byte in stack at Offset to byte at FSR0. Pointer FSR0 unchanged.
                      00503           movlw     Offset
                      00504           movf      PLUSW1,W,ACCESS
                      00505           addwf     INDF0,F,ACCESS
                      00506  endm
                      00507 
                      00508 
                      00509 Stk2AddToFSR0 macro Offset
                      00510   ; Add 2 bytes in stack at Offset to 2 bytes at FSR0.  Pointer FSR0 unchanged.
                      00511           movlw     Offset
                      00512           movf      PLUSW1,W,ACCESS
                      00513           addwf     POSTINC0,F,ACCESS
                      00514           movlw     Offset+1
                      00515           movf      PLUSW1,W,ACCESS
                      00516           addwfc    POSTDEC0,F,ACCESS
                      00517  endm
                      00518 
                      00519 
                      00520 Stk3AddToFSR0 macro Offset
                      00521   ; Add 3 bytes in stack at Offset to 3 bytes at FSR0.  Pointer FSR0 unchanged.
                      00522           movlw     Offset
                      00523           movf      PLUSW1,W,ACCESS
                      00524           addwf     POSTINC0,F,ACCESS
                      00525           movlw     Offset+1
                      00526           movf      PLUSW1,W,ACCESS
                      00527           addwfc    POSTINC0,F,ACCESS
                      00528           movlw     Offset+2
                      00529           movf      PLUSW1,W,ACCESS
                      00530           addwfc    POSTDEC0,F,ACCESS
                      00531           movf      POSTDEC0,F,ACCESS
                      00532  endm
                      00533 
                      00534 
                      00535 Stk4AddToFSR0 macro Offset
                      00536   ; Add 4 bytes in stack at Offset to 4 bytes at FSR0. Pointer FSR0 unchanged.
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00537           movlw     Offset
                      00538           movf      PLUSW1,W,ACCESS
                      00539           addwf     POSTINC0,F,ACCESS
                      00540           movlw     Offset+1
                      00541           movf      PLUSW1,W,ACCESS
                      00542           addwfc    POSTINC0,F,ACCESS
                      00543           movlw     Offset+2
                      00544           movf      PLUSW1,W,ACCESS
                      00545           addwfc    POSTINC0,F,ACCESS
                      00546           movlw     Offset+3
                      00547           movf      PLUSW1,W,ACCESS
                      00548           addwfc    POSTDEC0,F,ACCESS
                      00549           movf      POSTDEC0,F,ACCESS
                      00550           movf      POSTDEC0,F,ACCESS
                      00551  endm
                      00552 
                      00553 
                      00554 Stk1AddToFSR2 macro Offset
                      00555   ; Add 1 byte in stack at Offset to byte at FSR2. Pointer FSR2 unchanged.
                      00556           movlw     Offset
                      00557           movf      PLUSW1,W,ACCESS
                      00558           addwf     INDF2,F,ACCESS
                      00559  endm
                      00560 
                      00561 
                      00562 Stk2AddToFSR2 macro Offset
                      00563   ; Add 2 bytes in stack at Offset to 2 bytes at FSR2.  Pointer FSR2 unchanged.
                      00564           movlw     Offset
                      00565           movf      PLUSW1,W,ACCESS
                      00566           addwf     POSTINC2,F,ACCESS
                      00567           movlw     Offset+1
                      00568           movf      PLUSW1,W,ACCESS
                      00569           addwfc    POSTDEC2,F,ACCESS
                      00570  endm
                      00571 
                      00572 
                      00573 Stk3AddToFSR2 macro Offset
                      00574   ; Add 3 bytes in stack at Offset to 3 bytes at FSR2.  Pointer FSR2 unchanged.
                      00575           movlw     Offset
                      00576           movf      PLUSW1,W,ACCESS
                      00577           addwf     POSTINC2,F,ACCESS
                      00578           movlw     Offset+1
                      00579           movf      PLUSW1,W,ACCESS
                      00580           addwfc    POSTINC2,F,ACCESS
                      00581           movlw     Offset+2
                      00582           movf      PLUSW1,W,ACCESS
                      00583           addwfc    POSTDEC2,F,ACCESS
                      00584           movf      POSTDEC2,F,ACCESS
                      00585  endm
                      00586 
                      00587 
                      00588 Stk4AddToFSR2 macro Offset
                      00589   ; Add 4 bytes in stack at Offset to 4 bytes at FSR2. Pointer FSR2 unchanged.
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00590           movlw     Offset
                      00591           movf      PLUSW1,W,ACCESS
                      00592           addwf     POSTINC2,F,ACCESS
                      00593           movlw     Offset+1
                      00594           movf      PLUSW1,W,ACCESS
                      00595           addwfc    POSTINC2,F,ACCESS
                      00596           movlw     Offset+2
                      00597           movf      PLUSW1,W,ACCESS
                      00598           addwfc    POSTINC2,F,ACCESS
                      00599           movlw     Offset+3
                      00600           movf      PLUSW1,W,ACCESS
                      00601           addwfc    POSTDEC2,F,ACCESS
                      00602           movf      POSTDEC2,F,ACCESS
                      00603           movf      POSTDEC2,F,ACCESS
                      00604  endm
                      00605 
                      00606 
                      00607 
                      00608 
                      00609 Stk1ShiftLeft macro Offset
                      00610   ; Shift left 1 byte in stack at Offset
                      00611           bcf       STATUS,C
                      00612           movlw     Offset
                      00613           rlcf      PLUSW1,F,ACCESS
                      00614  endm
                      00615 
                      00616 
                      00617 Stk2ShiftLeft macro Offset
                      00618   ; Shift left 2 bytes in stack at Offset
                      00619           bcf       STATUS,C
                      00620           movlw     Offset
                      00621           rlcf      PLUSW1,F,ACCESS
                      00622           movlw     Offset+1
                      00623           rlcf      PLUSW1,F,ACCESS
                      00624  endm
                      00625 
                      00626 
                      00627 Stk4ShiftLeft macro Offset
                      00628   ; Shift left 4 bytes in stack at Offset
                      00629           bcf       STATUS,C
                      00630           movlw     Offset
                      00631           rlcf      PLUSW1,F,ACCESS
                      00632           movlw     Offset+1
                      00633           rlcf      PLUSW1,F,ACCESS
                      00634           movlw     Offset+2
                      00635           rlcf      PLUSW1,F,ACCESS
                      00636           movlw     Offset+3
                      00637           rlcf      PLUSW1,F,ACCESS
                      00638  endm
                      00639 
                      00640 
                      00641 Stk1Negate macro Offset
                      00642   ; Negate 1 byte in stack at Offset
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00643           movlw     Offset
                      00644           comf      PLUSW1,F,ACCESS
                      00645           incf      PLUSW1,F,ACCESS
                      00646  endm
                      00647 
                      00648 
                      00649 Stk2Negate macro Offset
                      00650   ; Negate 2 bytesin stack at Offset
                      00651           movlw     Offset
                      00652           comf      PLUSW1,F,ACCESS
                      00653           incf      PLUSW1,F,ACCESS
                      00654           movlw     Offset+1
                      00655           btfsc     STATUS,Z
                      00656           decf      PLUSW1,F,ACCESS
                      00657           comf      PLUSW1,F,ACCESS
                      00658  endm
                      00659 
                      00660 
                      00661 Stk4Negate macro Offset
                      00662   ; Negate 4 bytes in stack at Offset
                      00663           local jEnd
                      00664           movlw     Offset
                      00665           comf      PLUSW1,F,ACCESS
                      00666           movlw     Offset+1
                      00667           comf      PLUSW1,F,ACCESS
                      00668           movlw     Offset+2
                      00669           comf      PLUSW1,F,ACCESS
                      00670           movlw     Offset+3
                      00671           comf      PLUSW1,F,ACCESS
                      00672 
                      00673           movlw     Offset
                      00674           incf      PLUSW1,F,ACCESS
                      00675           bnz       jEnd
                      00676           movlw     Offset+1
                      00677           incf      PLUSW1,F,ACCESS
                      00678           bnz       jEnd
                      00679           movlw     Offset+2
                      00680           incf      PLUSW1,F,ACCESS
                      00681           bnz       jEnd
                      00682           movlw     Offset+3
                      00683           incf      PLUSW1,F,ACCESS
                      00684 jEnd:
                      00685  endm
                      00686 
                      00687 Stk1NegateFSR2 macro
                      00688   ; Negate 1 byte at FSR2.  FSR2 unchanged.
                      00689           comf      INDF2,F,ACCESS
                      00690           incf      INDF2,F,ACCESS
                      00691  endm
                      00692 
                      00693 
                      00694 Stk2NegateFSR2 macro
                      00695   ; Negate 2 bytes at FSR2.  FSR2 unchanged.
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00696           comf      INDF2,F,ACCESS
                      00697           incf      POSTINC2,F,ACCESS
                      00698           btfsc     STATUS,Z
                      00699           decf      INDF2,F,ACCESS
                      00700           comf      POSTDEC2,F,ACCESS
                      00701  endm
                      00702 
                      00703 
                      00704 ;====== These branches are short ==============
                      00705 
                      00706 jmpWeqZ macro   Label        ; jmp if W == 0
                      00707         movf      WREG,F,ACCESS
                      00708         bz        Label
                      00709           endm
                      00710 
                      00711 jmpWneZ macro   Label        ; jmp if W != 0
                      00712         tstfsz    WREG,ACCESS
                      00713         bra       Label
                      00714           endm
                      00715 
                      00716 
                      00717 jmpFeqZ macro   Reg,Acc,Label
                      00718         movf      Reg,F,Acc
                      00719         bz        Label
                      00720         endm
                      00721 
                      00722 jmpFneZ macro   Reg,Acc,Label
                      00723         movf      Reg,F,Acc
                      00724         bnz       Label
                      00725         endm
                      00726 
                      00727 jmpFeqL macro   Reg,Acc,bVal,Label
                      00728           movlw     bVal
                      00729           subwf     Reg,W,Acc
                      00730         bz        Label
                      00731         endm
                      00732 
                      00733 jmpFneL macro   Reg,Acc,bVal,Label
                      00734           movlw     bVal
                      00735           subwf     Reg,W,Acc
                      00736         bnz       Label
                      00737         endm
                      00738 
                      00739 jmpFleL macro   Reg,Acc,bVal,Label
                      00740           movlw     bVal
                      00741           cpfsgt    Reg,Acc
                      00742         bra       Label
                      00743         endm
                      00744 
                      00745 jmpFgeL macro   Reg,Acc,bVal,Label
                      00746           movlw     bVal
                      00747           cpfslt    Reg,Acc
                      00748         bra       Label
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00749         endm
                      00750 
                      00751 
                      00752 jmpFeqF macro   Reg1,Acc1,Reg2,Acc2,Label
                      00753           movf      Reg1,W,Acc1
                      00754           subwf     Reg2,W,Acc2
                      00755         bz        Label
                      00756         endm
                      00757 
                      00758 jmpFneF macro   Reg1,Acc1,Reg2,Acc2,Label
                      00759           movf      Reg1,W,Acc1
                      00760           subwf     Reg2,W,Acc2
                      00761         bnz       Label
                      00762         endm
                      00763 
                      00764 jmpClr  macro Reg,Bit,Acc,Label
                      00765         btfss   Reg,Bit,Acc
                      00766         bra       Label
                      00767         endm
                      00768 
                      00769 jmpSet  macro Reg,Bit,Acc,Label
                      00770         btfsc   Reg,Bit,Acc
                      00771         bra       Label
                      00772         endm
                      00773 
                      00774 
                      00775 
                      00077 
                      00078 
                      00079 ;***************************************************************************
                      00080 ; Function:     void _addBI()
                      00081 ;
                      00082 ; PreCondition: _iA and _iB are loaded with the LSB of each BigInt
                      00083 ;                               _xA and _xB are loaded with the MSB of each BigInt
                      00084 ;                               A.size >= B.magnitude
                      00085 ;                               A and B must both be 2048 bits or less (256 bytes)
                      00086 ;
                      00087 ; Input:                A and B, the BigInts to add
                      00088 ;
                      00089 ; Output:               A = A + B
                      00090 ;
                      00091 ; Side Effects: None
                      00092 ;
                      00093 ; Stack Req:    2 bytes
                      00094 ;
                      00095 ; Overview:     Quickly performs the bulk addition of two BigInts
                      00096 ;***************************************************************************
  0000                00097         GLOBAL  _addBI
000000                00098 _addBI:
                      00099     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000000 CFD9 FFE6          M           movff     FSR2L,POSTINC1
000004 CFDA FFE6          M           movff     FSR2L+1,POSTINC1
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000008 010?           00100         banksel _xA                                     ;select the assembly pointer bank
00000A C??? FFE9      00101         movff   _iA+0x0,FSR0L           ;Put iA in FSR0
00000E C??? FFEA      00102         movff   _iA+0x1,FSR0H
000012 C??? FFD9      00103         movff   _iB+0x0,FSR2L           ;Put iB in FSR2
000016 C??? FFDA      00104         movff   _iB+0x1,FSR2H
                      00105         
                      00106         ; Predecrement A and B pointers
00001A 50ED           00107         movf    POSTDEC0, W
00001C 50DD           00108         movf    POSTDEC2, W
                      00109 
                      00110         ; Calculate how many adds are needed divided by 8, store count in 
                      00111         ; PRODH
                      00112         ; Note: This assumes there are no more than 256 adds to do
00001E 04??           00113         decf    _iB+0x0, W
000020 5C??           00114         subwf   _xB+0x0, W
000022 0BF8           00115         andlw   0xF8
000024 6EF4           00116         movwf   PRODH
000026 3AF4           00117         swapf   PRODH, F
000028 46F4           00118         rlncf   PRODH, F
                      00119         
00002A 2AF4           00120         incf    PRODH, F                ; Preincrement so we can start the loop with a decrement
00002C 6AF3           00121         clrf    PRODL                   ; Start out with no carry
00002E D???           00122         bra             aTest8Add
                      00123 
                      00124         ; Add 8 bytes of B into A at a time.  Doing it in such large 
                      00125         ; chunks saves loop and branch overhead
000030                00126 aDo8Add:
000030 32F3           00127         rrcf    PRODL, F                ; Load carry in value
000032 50DC           00128         movf    PREINC2, W
000034 22EC           00129         addwfc  PREINC0, F
000036 50DC           00130         movf    PREINC2, W
000038 22EC           00131         addwfc  PREINC0, F
00003A 50DC           00132         movf    PREINC2, W
00003C 22EC           00133         addwfc  PREINC0, F
00003E 50DC           00134         movf    PREINC2, W
000040 22EC           00135         addwfc  PREINC0, F
000042 50DC           00136         movf    PREINC2, W
000044 22EC           00137         addwfc  PREINC0, F
000046 50DC           00138         movf    PREINC2, W
000048 22EC           00139         addwfc  PREINC0, F
00004A 50DC           00140         movf    PREINC2, W
00004C 22EC           00141         addwfc  PREINC0, F
00004E 50DC           00142         movf    PREINC2, W
000050 22EC           00143         addwfc  PREINC0, F
000052 36F3           00144         rlcf    PRODL, F                ; Save carry out value
000054                00145 aTest8Add:      
000054 06F4           00146         decf    PRODH, F
000056 E1??           00147         bnz             aDo8Add
                      00148 
                      00149 
000058 32F3           00150         rrcf    PRODL, F                ; Load carry in value
00005A D???           00151         bra             aTestResidualAdd
                      00152 
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00153 
                      00154         ; Add up to 7 bytes of B into A, one byte at a time.
00005C                00155 aDoResidualAdd:
00005C 50DC           00156         movf    PREINC2, W
00005E 22EC           00157         addwfc  PREINC0, F
                      00158 
000060                00159 aTestResidualAdd:
000060 50D9           00160         movf    FSR2L, W
000062 18??           00161         xorwf   _xB+0x0, W
000064 E1??           00162         bnz             aDoResidualAdd
                      00163 
                      00164         ; Carry forward the carry out (in A) if needed
000066 E3??           00165         bnc             aDone
                      00166 
000068                00167 aDoFinalCarry:
000068 50E9           00168         movf    FSR0L, W
00006A 18??           00169         xorwf   _xA+0x0, W
00006C E0??           00170         bz              aDone
00006E 2AEC           00171         incf    PREINC0, F
000070 E2??           00172         bc              aDoFinalCarry
                      00173 
000072                00174 aDone:
                      00175         Stk2PopToReg    FSR2L           ;restore FSR2 from stack
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
000072 0EFF               M           movlw     0xFF
000074 CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
000078 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
00007A 0EFF               M           movlw     0xFF
00007C CFE3 FFD9          M           movff     PLUSW1,FSR2L
000080 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000082 0012           00176         return
                      00177 
                      00178 
                      00179 ;***************************************************************************
                      00180 ; Function:     void _addBIROM()
                      00181 ;
                      00182 ; PreCondition: _iA and _iBr are loaded with the LSB of each BigInt
                      00183 ;                               _xA and _xBr are loaded with the MSB of each BigInt
                      00184 ;                               A.size >= B.magnitude
                      00185 ;                               A and B must both be 2048 bits or less (256 bytes)
                      00186 ;
                      00187 ; Input:                A: a BigInt in RAM
                      00188 ;                               B: a BigInt in ROM
                      00189 ;
                      00190 ; Output:               A = A + B
                      00191 ;
                      00192 ; Side Effects: Overwrites TBLPTRU:TBLPTRH:TBLPTRL registers
                      00193 ;
                      00194 ; Stack Req:    0 bytes
                      00195 ;
                      00196 ; Overview:     Quickly performs the bulk addition of two BigInts
                      00197 ;***************************************************************************
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00198         GLOBAL  _addBIROM
000084                00199 _addBIROM:
000084 010?           00200         banksel _xA                                     ;Select the assembly pointer bank
000086 C??? FFE9      00201         movff   _iA+0x0,FSR0L           ;Put iA in FSR0
00008A C??? FFEA      00202         movff   _iA+0x1,FSR0H
00008E C??? FFF6      00203         movff   _iBr+0x0,TBLPTRL        ;Put iB in TBLPTR
000092 C??? FFF7      00204         movff   _iBr+0x1,TBLPTRH
000096 C??? FFF8      00205         movff   _iBr+0x2,TBLPTRU                
                      00206         
                      00207         ; Predecrement A and B pointers
00009A 50ED           00208         movf    POSTDEC0, W
00009C 000A           00209         tblrd*- 
                      00210 
                      00211         ; Calculate how many adds are needed divided by 8, store count in 
                      00212         ; PRODH
                      00213         ; Note: This assumes there are no more than 256 adds to do
00009E 04??           00214         decf    _iBr+0x0, W
0000A0 5C??           00215         subwf   _xBr+0x0, W
0000A2 0BF8           00216         andlw   0xF8
0000A4 6EF4           00217         movwf   PRODH
0000A6 3AF4           00218         swapf   PRODH, F
0000A8 46F4           00219         rlncf   PRODH, F
                      00220         
0000AA 2AF4           00221         incf    PRODH, F                ; Preincrement so we can start the loop with a decrement
0000AC 6AF3           00222         clrf    PRODL                   ; Start out with no carry
0000AE D???           00223         bra             aRTest8Add
                      00224 
                      00225         ; Add 8 bytes of B into A at a time.  Doing it in such large 
                      00226         ; chunks saves loop and branch overhead
0000B0                00227 aRDo8Add:
0000B0 32F3           00228         rrcf    PRODL, F                ; Load carry in value
0000B2 000B           00229         tblrd+*
0000B4 50F5           00230         movf    TABLAT, W
0000B6 22EC           00231         addwfc  PREINC0, F
0000B8 000B           00232         tblrd+*
0000BA 50F5           00233         movf    TABLAT, W
0000BC 22EC           00234         addwfc  PREINC0, F
0000BE 000B           00235         tblrd+*
0000C0 50F5           00236         movf    TABLAT, W
0000C2 22EC           00237         addwfc  PREINC0, F
0000C4 000B           00238         tblrd+*
0000C6 50F5           00239         movf    TABLAT, W
0000C8 22EC           00240         addwfc  PREINC0, F
0000CA 000B           00241         tblrd+*
0000CC 50F5           00242         movf    TABLAT, W
0000CE 22EC           00243         addwfc  PREINC0, F
0000D0 000B           00244         tblrd+*
0000D2 50F5           00245         movf    TABLAT, W
0000D4 22EC           00246         addwfc  PREINC0, F
0000D6 000B           00247         tblrd+*
0000D8 50F5           00248         movf    TABLAT, W
0000DA 22EC           00249         addwfc  PREINC0, F
0000DC 000B           00250         tblrd+*
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000DE 50F5           00251         movf    TABLAT, W
0000E0 22EC           00252         addwfc  PREINC0, F
0000E2 36F3           00253         rlcf    PRODL, F                ; Save carry out value
0000E4                00254 aRTest8Add:     
0000E4 06F4           00255         decf    PRODH, F
0000E6 E1??           00256         bnz             aRDo8Add
                      00257 
                      00258 
0000E8 32F3           00259         rrcf    PRODL, F                ; Load carry in value
0000EA D???           00260         bra             aRTestResidualAdd
                      00261 
                      00262 
                      00263         ; Add up to 7 bytes of B into A, one byte at a time.
0000EC                00264 aRDoResidualAdd:
0000EC 000B           00265         tblrd+*
0000EE 50F5           00266         movf    TABLAT, W
0000F0 22EC           00267         addwfc  PREINC0, F
                      00268 
0000F2                00269 aRTestResidualAdd:
0000F2 50F6           00270         movf    TBLPTRL, W
0000F4 18??           00271         xorwf   _xBr+0x0, W
0000F6 E1??           00272         bnz             aRDoResidualAdd
                      00273 
                      00274         ; Carry forward the carry out (in A) if needed
0000F8 E3??           00275         bnc             aRDone
                      00276 
0000FA                00277 aRDoFinalCarry:
0000FA 50E9           00278         movf    FSR0L, W
0000FC 18??           00279         xorwf   _xA+0x0, W
0000FE E0??           00280         bz              aRDone
000100 2AEC           00281         incf    PREINC0, F
000102 E2??           00282         bc              aRDoFinalCarry
                      00283 
000104                00284 aRDone:
000104 0012           00285         return
                      00286 
                      00287 
                      00288 ;***************************************************************************
                      00289 ; Function:     void _subBI()
                      00290 ;
                      00291 ; PreCondition: _iA and _iB are loaded with the LSB of each BigInt
                      00292 ;                               _xA and _xB are loaded with the MSB of each BigInt
                      00293 ;                               A.size >= B.magnitude
                      00294 ;                               A and B must both be 2048 bits or less (256 bytes)
                      00295 ;
                      00296 ; Input:                A and B, the BigInts to subtract
                      00297 ;
                      00298 ; Output:               A = A - B
                      00299 ;
                      00300 ; Side Effects: None
                      00301 ;
                      00302 ; Stack Req:    2 bytes
                      00303 ;
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00304 ; Overview:     Quickly performs the bulk subtraction of two BigInts
                      00305 ;***************************************************************************
  0000                00306         GLOBAL  _subBI
000106                00307 _subBI:
                      00308     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000106 CFD9 FFE6          M           movff     FSR2L,POSTINC1
00010A CFDA FFE6          M           movff     FSR2L+1,POSTINC1
00010E 010?           00309         banksel _xA                                     ;select the assembly pointer bank
000110 C??? FFE9      00310         movff   _iA+0x0,FSR0L           ;Put iA in FSR0
000114 C??? FFEA      00311         movff   _iA+0x1,FSR0H
000118 C??? FFD9      00312         movff   _iB+0x0,FSR2L           ;Put iB in FSR2
00011C C??? FFDA      00313         movff   _iB+0x1,FSR2H
                      00314         
                      00315         ; Predecrement A and B pointers
000120 50ED           00316         movf    POSTDEC0, W
000122 50DD           00317         movf    POSTDEC2, W
                      00318 
                      00319         ; Calculate how many subtracts are needed divided by 8, store 
                      00320         ; count in PRODH
                      00321         ; Note: This assumes there are no more than 256 subtracts to do
000124 04??           00322         decf    _iB+0x0, W
000126 5C??           00323         subwf   _xB+0x0, W
000128 0BF8           00324         andlw   0xF8
00012A 6EF4           00325         movwf   PRODH
00012C 3AF4           00326         swapf   PRODH, F
00012E 46F4           00327         rlncf   PRODH, F
                      00328         
000130 2AF4           00329         incf    PRODH, F                ; Preincrement so we can start the loop with a decrement
000132 68F3           00330         setf    PRODL                   ; Start out with no borrow
000134 D???           00331         bra             sTest8Subtract
                      00332 
                      00333         ; Add 8 bytes of B into A at a time.  Doing it in such large 
                      00334         ; chunks saves loop and branch overhead
000136                00335 sDo8Subtract:
000136 32F3           00336         rrcf    PRODL, F                ; Load borrow in value
000138 50DC           00337         movf    PREINC2, W
00013A 5AEC           00338         subwfb  PREINC0, F
00013C 50DC           00339         movf    PREINC2, W
00013E 5AEC           00340         subwfb  PREINC0, F
000140 50DC           00341         movf    PREINC2, W
000142 5AEC           00342         subwfb  PREINC0, F
000144 50DC           00343         movf    PREINC2, W
000146 5AEC           00344         subwfb  PREINC0, F
000148 50DC           00345         movf    PREINC2, W
00014A 5AEC           00346         subwfb  PREINC0, F
00014C 50DC           00347         movf    PREINC2, W
00014E 5AEC           00348         subwfb  PREINC0, F
000150 50DC           00349         movf    PREINC2, W
000152 5AEC           00350         subwfb  PREINC0, F
000154 50DC           00351         movf    PREINC2, W
000156 5AEC           00352         subwfb  PREINC0, F
000158 36F3           00353         rlcf    PRODL, F                ; Save borrow out value
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00015A                00354 sTest8Subtract: 
00015A 06F4           00355         decf    PRODH, F
00015C E1??           00356         bnz             sDo8Subtract
                      00357 
                      00358 
00015E 32F3           00359         rrcf    PRODL, F                ; Load borrow in value
000160 D???           00360         bra             sTestResidualSubtract
                      00361 
                      00362 
                      00363         ; Subtract up to 7 bytes of B from A, one byte at a time.
000162                00364 sDoResidualSubtract:
000162 50DC           00365         movf    PREINC2, W
000164 5AEC           00366         subwfb  PREINC0, F
                      00367 
000166                00368 sTestResidualSubtract:
000166 50D9           00369         movf    FSR2L, W
000168 18??           00370         xorwf   _xB+0x0, W
00016A E1??           00371         bnz             sDoResidualSubtract
                      00372 
                      00373         ; Carry forward the borrow out (in A) if needed
00016C E2??           00374         bc              sDone
                      00375 
00016E                00376 sDoFinalCarry:
00016E 50E9           00377         movf    FSR0L, W
000170 18??           00378         xorwf   _xA+0x0, W
000172 E0??           00379         bz              sDone
000174 06EC           00380         decf    PREINC0, F
000176 E3??           00381         bnc             sDoFinalCarry
                      00382 
000178                00383 sDone:
                      00384         Stk2PopToReg    FSR2L           ;restore FSR2 from stack
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
000178 0EFF               M           movlw     0xFF
00017A CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
00017E 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000180 0EFF               M           movlw     0xFF
000182 CFE3 FFD9          M           movff     PLUSW1,FSR2L
000186 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000188 0012           00385         return
                      00386 
                      00387 
                      00388 ;***************************************************************************
                      00389 ; Function:     void _subBIROM()
                      00390 ;
                      00391 ; PreCondition: _iA and _iBr are loaded with the LSB of each BigInt
                      00392 ;                               _xA and _xBr are loaded with the MSB of each BigInt
                      00393 ;                               A.size >= B.magnitude
                      00394 ;                               A and B must both be 2048 bits or less (256 bytes)
                      00395 ;
                      00396 ; Input:                A: a BigInt in RAM
                      00397 ;                               B: a BigInt in ROM
                      00398 ;
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00399 ; Output:               A = A - B
                      00400 ;
                      00401 ; Side Effects: Overwrites TBLPTRU:TBLPTRH:TBLPTRL registers
                      00402 ;
                      00403 ; Stack Req:    None
                      00404 ;
                      00405 ; Overview:     Quickly performs the bulk subtraction of two BigInts
                      00406 ;***************************************************************************
  0000                00407         GLOBAL  _subBIROM
00018A                00408 _subBIROM:
00018A 010?           00409         banksel _xA                                     ;Select the assembly pointer bank
00018C C??? FFE9      00410         movff   _iA+0x0,FSR0L           ;Put iA in FSR0
000190 C??? FFEA      00411         movff   _iA+0x1,FSR0H
000194 C??? FFF6      00412         movff   _iBr+0x0,TBLPTRL        ;Put iB in TBLPTR
000198 C??? FFF7      00413         movff   _iBr+0x1,TBLPTRH
00019C C??? FFF8      00414         movff   _iBr+0x2,TBLPTRU                
                      00415         
                      00416         ; Predecrement A and B pointers
0001A0 50ED           00417         movf    POSTDEC0, W
0001A2 000A           00418         tblrd*- 
                      00419 
                      00420         ; Calculate how many adds are needed divided by 8, store count in 
                      00421         ; PRODH
                      00422         ; Note: This assumes there are no more than 256 adds to do
0001A4 04??           00423         decf    _iBr+0x0, W
0001A6 5C??           00424         subwf   _xBr+0x0, W
0001A8 0BF8           00425         andlw   0xF8
0001AA 6EF4           00426         movwf   PRODH
0001AC 3AF4           00427         swapf   PRODH, F
0001AE 46F4           00428         rlncf   PRODH, F
                      00429         
0001B0 2AF4           00430         incf    PRODH, F                ; Preincrement so we can start the loop with a decrement
0001B2 68F3           00431         setf    PRODL                   ; Start out with no borrow
0001B4 D???           00432         bra             sRTest8Subtract
                      00433 
                      00434         ; Subtract 8 bytes of B from A at a time.  Doing it in such large 
                      00435         ; chunks saves loop and branch overhead
0001B6                00436 sRDo8Subtract:
0001B6 32F3           00437         rrcf    PRODL, F                ; Load borrow in value
0001B8 000B           00438         tblrd+*
0001BA 50F5           00439         movf    TABLAT, W
0001BC 5AEC           00440         subwfb  PREINC0, F
0001BE 000B           00441         tblrd+*
0001C0 50F5           00442         movf    TABLAT, W
0001C2 5AEC           00443         subwfb  PREINC0, F
0001C4 000B           00444         tblrd+*
0001C6 50F5           00445         movf    TABLAT, W
0001C8 5AEC           00446         subwfb  PREINC0, F
0001CA 000B           00447         tblrd+*
0001CC 50F5           00448         movf    TABLAT, W
0001CE 5AEC           00449         subwfb  PREINC0, F
0001D0 000B           00450         tblrd+*
0001D2 50F5           00451         movf    TABLAT, W
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001D4 5AEC           00452         subwfb  PREINC0, F
0001D6 000B           00453         tblrd+*
0001D8 50F5           00454         movf    TABLAT, W
0001DA 5AEC           00455         subwfb  PREINC0, F
0001DC 000B           00456         tblrd+*
0001DE 50F5           00457         movf    TABLAT, W
0001E0 5AEC           00458         subwfb  PREINC0, F
0001E2 000B           00459         tblrd+*
0001E4 50F5           00460         movf    TABLAT, W
0001E6 5AEC           00461         subwfb  PREINC0, F
0001E8 36F3           00462         rlcf    PRODL, F                ; Save borrow out value
0001EA                00463 sRTest8Subtract:        
0001EA 06F4           00464         decf    PRODH, F
0001EC E1??           00465         bnz             sRDo8Subtract
                      00466 
                      00467 
0001EE 32F3           00468         rrcf    PRODL, F                ; Load borrow in value
0001F0 D???           00469         bra             sRTestResidualSubtract
                      00470 
                      00471 
                      00472         ; Subtract up to 7 bytes of B from A, one byte at a time.
0001F2                00473 sRDoResidualSubtract:
0001F2 000B           00474         tblrd+*
0001F4 50F5           00475         movf    TABLAT, W
0001F6 5AEC           00476         subwfb  PREINC0, F
                      00477 
0001F8                00478 sRTestResidualSubtract:
0001F8 50F6           00479         movf    TBLPTRL, W
0001FA 18??           00480         xorwf   _xBr+0x0, W
0001FC E1??           00481         bnz             sRDoResidualSubtract
                      00482 
                      00483         ; Carry forward the borrow out (in A) if needed
0001FE E2??           00484         bc              sRDone
                      00485 
000200                00486 sRDoFinalCarry:
000200 50E9           00487         movf    FSR0L, W
000202 18??           00488         xorwf   _xA+0x0, W
000204 E0??           00489         bz              sRDone
000206 2AEC           00490         incf    PREINC0, F
000208 E3??           00491         bnc             sRDoFinalCarry
                      00492 
00020A                00493 sRDone:
00020A 0012           00494         return
                      00495 
                      00496 
                      00497 ;***************************************************************************
                      00498 ; Function:     void _zeroBI()
                      00499 ;
                      00500 ; PreCondition: _iA is loaded with the LSB of the BigInt
                      00501 ;                               _xA is loaded with the MSB the BigInt
                      00502 ;
                      00503 ; Input:                A: a BigInt
                      00504 ;
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00505 ; Output:               A = 0
                      00506 ;
                      00507 ; Side Effects: None
                      00508 ;
                      00509 ; Stack Req:    None
                      00510 ;
                      00511 ; Overview:     Sets all bytes from _iA to _xA to zero
                      00512 ;***************************************************************************
  0000                00513         GLOBAL  _zeroBI
00020C                00514 _zeroBI:
00020C 010?           00515         banksel _xA                                     ;select the assembly pointer bank
00020E C??? FFE9      00516         movff   _iA+0x0,FSR0L           ;Put iA-1 in FSR0
000212 C??? FFEA      00517         movff   _iA+0x1,FSR0H
000216 50ED           00518         movf    POSTDEC0, W
                      00519         
000218                00520 zLoop:
000218 6AEC           00521         clrf    PREINC0                         ;set byte to zero
00021A 50E9           00522         movf    FSR0L,W                         ;check if A is at MSB
00021C 18??           00523         xorwf   _xA+0x0,W                       ;test low byte first
00021E E1??           00524         bnz             zLoop                           ;add to A, and continue
000220 50EA           00525         movf    FSR0H,W                         ;check high byte
000222 18??           00526         xorwf   _xA+0x1,W                       ;
000224 E1??           00527         bnz             zLoop                           ;if A is not at MSB, we're not done
                      00528         
000226 0012           00529         return
                      00530 
                      00531 
                      00532 ;***************************************************************************
                      00533 ; Function:     void _msbBI()
                      00534 ;
                      00535 ; PreCondition: _iA is loaded with the address of the LSB of the BigInt buffer
                      00536 ;                               _xA is loaded with the address of the right most byte of the BigInt buff
                            er
                      00537 ;
                      00538 ; Input:                None
                      00539 ;
                      00540 ; Output:               _xA is now pointing to the MSB of the BigInt
                      00541 ;
                      00542 ; Side Effects: None
                      00543 ;
                      00544 ; Overview:     Finds the MSB (first non-zero word) of the BigInt, starting 
                      00545 ;                               from the right-most word and testing to the left.  This 
                      00546 ;                               function will stop if _iA is reached.
                      00547 ;***************************************************************************
  0000                00548         GLOBAL  _msbBI
000228                00549 _msbBI:
000228 010?           00550         banksel _xA                                     ; Select the correct bank
00022A C??? FFE9      00551         movff   _xA+0x0,FSR0L           ; Put xA in FSR0
00022E C??? FFEA      00552         movff   _xA+0x1,FSR0H
                      00553 
000232                00554 msbLoop:
000232 50E9           00555         movf    FSR0L, W
000234 5C??           00556         subwf   _iA+0x0, W
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000236 E0??           00557         bz              msbFound
000238 50ED           00558         movf    POSTDEC0, W                     ; load the next value
00023A E0??           00559         bz              msbLoop                         ; if value isn't zero, this is the MSB
                      00560         
00023C 50EC           00561         movf    PREINC0, W                      ; Correct the pointer's last decrement
                      00562         
                      00563         ; Copy FSR0 back to _xA and return
00023E                00564 msbFound:
00023E CFE9 F???      00565         movff   FSR0L,_xA+0x0           ; Move FSR0 back to iA
000242 CFEA F???      00566         movff   FSR0H,_xA+0x1           
000246 0012           00567         return
                      00568 
                      00569 
                      00570 ;***************************************************************************
                      00571 ; Function:     void _mulBI()
                      00572 ;
                      00573 ; PreCondition: _iA and _iB are loaded with the LSB of each BigInt
                      00574 ;                               _xA and _xB are loaded with the MSB of each BigInt
                      00575 ;                               _iR is the LSB of the accumulator BigInt
                      00576 ;                               _iR is zeroed, and has enough space
                      00577 ;                               A and B must both by 2048 bits or less (256 bytes max)
                      00578 ;
                      00579 ; Input:                A and B, the BigInts to multiply
                      00580 ;
                      00581 ; Output:               R = A * B
                      00582 ;
                      00583 ; Side Effects: None
                      00584 ;
                      00585 ; Stack Req:    2 bytes
                      00586 ;
                      00587 ; Overview:     Performs the bulk multiplication of two BigInts
                      00588 ;***************************************************************************
  0000                00589         GLOBAL  _mulBI
000248                00590 _mulBI:
                      00591     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000248 CFD9 FFE6          M           movff     FSR2L,POSTINC1
00024C CFDA FFE6          M           movff     FSR2L+1,POSTINC1
000250 010?           00592         banksel _xA                                     ;select the assembly pointer bank
                      00593 
                      00594         ; Predecrement B and R pointers
000252 6AE8           00595         clrf    WREG
000254 06??           00596         decf    _iB+0x0, F
000256 5A??           00597         subwfb  _iB+0x1, F
000258 06??           00598         decf    _iR+0x0, F
00025A 5A??           00599         subwfb  _iR+0x1, F
                      00600 
00025C                00601 mLoadB:
                      00602         ; Load B pointer to FSR2 and increment B pointer
                      00603         ; Increment iR to match the new starting position
                      00604         ; Fetch new B value
00025C C??? FFD9      00605         movff   _iB+0x0, FSR2L
000260 C??? FFDA      00606         movff   _iB+0x1, FSR2H  
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000264 6AE8           00607         clrf    WREG
000266                00608 mLoadBAgain:
000266 2A??           00609         incf    _iB+0x0, F
000268 22??           00610         addwfc  _iB+0x1, F
00026A 2A??           00611         incf    _iR+0x0, F
00026C 22??           00612         addwfc  _iR+0x1, F
00026E 50DC           00613         movf    PREINC2, W
000270 E0??           00614         bz              mLoadBAgain                     ; No need to multiply this byte if it is zero
000272 6E??           00615         movwf   _wC
                      00616 
                      00617         ; Restore iA start pointer in FSR0
000274 C??? FFE9      00618         movff   _iA+0x0, FSR0L
000278 C??? FFEA      00619         movff   _iA+0x1, FSR0H
                      00620 
                      00621         ; Store new iR start pointer in FSR2
00027C C??? FFD9      00622         movff   _iR+0x0, FSR2L
000280 C??? FFDA      00623         movff   _iR+0x1, FSR2H
                      00624 
                      00625         ; Clear carry byte
000284 6A??           00626         clrf    CarryByte
                      00627 
000286                00628 mLoopA:
000286 50??           00629         movf    CarryByte, W            ;load carry byte
000288 26DF           00630         addwf   INDF2, F                        ;add to accumulator
00028A 6A??           00631         clrf    CarryByte                       ;clear carry byte
00028C 36??           00632         rlcf    CarryByte, F            ;if a carry occurred, save to CarryByte
00028E 50??           00633         movf    _wC, W                          ;load wC
000290 02EE           00634         mulwf   POSTINC0                        ;calculate wC * A[iA++]
000292 50F3           00635         movf    PRODL,W                         ;load low result byte
000294 26DE           00636         addwf   POSTINC2, F                     ;add to accumulator, and move ptr
000296 50F4           00637         movf    PRODH,W                         ;load high result byte
000298 22??           00638         addwfc  CarryByte, F            ;add to carry byte, along with
                      00639                                                                 ;  any carry from previous addition
                      00640 
                      00641         ; See if A loop is done
00029A 04E9           00642         decf    FSR0L, W
00029C 18??           00643         xorwf   _xA+0x0, W
00029E E1??           00644         bnz             mLoopA
                      00645 
                      00646         ; If A loop is done, finish out the carrying
0002A0 C??? FFDF      00647         movff   CarryByte, INDF2                ;save carry byte (always adding to zero)
                      00648 
                      00649         ; See if B loop is done
0002A4 50??           00650         movf    _xB+0x0, W
0002A6 18??           00651         xorwf   _iB+0x0, W
0002A8 E1??           00652         bnz             mLoadB
                      00653 
0002AA                00654 mDone:
                      00655         Stk2PopToReg    FSR2L           ;restore old FSR2
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
0002AA 0EFF               M           movlw     0xFF
0002AC CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002B0 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0002B2 0EFF               M           movlw     0xFF
0002B4 CFE3 FFD9          M           movff     PLUSW1,FSR2L
0002B8 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0002BA 0012           00656         return
                      00657         
                      00658 
                      00659 ;***************************************************************************
                      00660 ; Function:     void _mulBIROM()
                      00661 ;
                      00662 ; PreCondition: _iA and _iBr are loaded with the LSB of each BigInt
                      00663 ;                               _xA and _xBr are loaded with the MSB of each BigInt
                      00664 ;                               _iR is the LSB of the accumulator BigInt
                      00665 ;                               _iR is zeroed, and has enough space
                      00666 ;
                      00667 ; Input:                A: BigInt in RAM
                      00668 ;                               B: BigInt in ROM
                      00669 ;
                      00670 ; Output:               R = A * B
                      00671 ;
                      00672 ; Side Effects: Overwrites TBLPTRU:TBLPTRH:TBLPTRL
                      00673 ;
                      00674 ; Stack Req:    2 bytes
                      00675 ;
                      00676 ; Overview:     Performs the bulk multiplication of two BigInts
                      00677 ;***************************************************************************
  0000                00678         GLOBAL  _mulBIROM
0002BC                00679 _mulBIROM:
                      00680     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
0002BC CFD9 FFE6          M           movff     FSR2L,POSTINC1
0002C0 CFDA FFE6          M           movff     FSR2L+1,POSTINC1
0002C4 010?           00681         banksel _xA                                     ;select the assembly pointer bank
                      00682 
                      00683         ; Predecrement B and R pointers
0002C6 C??? FFF6      00684         movff   _iBr+0x0, TBLPTRL
0002CA C??? FFF7      00685         movff   _iBr+0x1, TBLPTRH
0002CE C??? FFF8      00686         movff   _iBr+0x2, TBLPTRU
0002D2 000A           00687         tblrd*-
0002D4 6AE8           00688         clrf    WREG
0002D6 06??           00689         decf    _iR+0x0, F
0002D8 5A??           00690         subwfb  _iR+0x1, F
                      00691 
0002DA                00692 mRLoadB:
                      00693         ; Increment iR to match the new starting position
                      00694         ; Fetch new B value
0002DA 6AE8           00695         clrf    WREG
0002DC                00696 mRLoadBAgain:
0002DC 2A??           00697         incf    _iR+0x0, F
0002DE 22??           00698         addwfc  _iR+0x1, F
0002E0 000B           00699         tblrd+*
0002E2 50F5           00700         movf    TABLAT, W
0002E4 E0??           00701         bz              mRLoadBAgain                    ; No need to multiply this byte if it is zero
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002E6 6E??           00702         movwf   _wC
                      00703 
                      00704         ; Restore iA start pointer in FSR0
0002E8 C??? FFE9      00705         movff   _iA+0x0, FSR0L
0002EC C??? FFEA      00706         movff   _iA+0x1, FSR0H
                      00707 
                      00708         ; Store new iR start pointer in FSR2
0002F0 C??? FFD9      00709         movff   _iR+0x0, FSR2L
0002F4 C??? FFDA      00710         movff   _iR+0x1, FSR2H
                      00711 
                      00712         ; Clear carry byte
0002F8 6A??           00713         clrf    CarryByte
                      00714 
0002FA                00715 mRLoopA:
0002FA 50??           00716         movf    CarryByte, W            ;load carry byte
0002FC 26DF           00717         addwf   INDF2, F                        ;add to accumulator
0002FE 6A??           00718         clrf    CarryByte                       ;clear carry byte
000300 36??           00719         rlcf    CarryByte, F            ;if a carry occurred, save to CarryByte
000302 50??           00720         movf    _wC, W                          ;load wC
000304 02EE           00721         mulwf   POSTINC0                        ;calculate wC * A[iA++]
000306 50F3           00722         movf    PRODL,W                         ;load low result byte
000308 26DE           00723         addwf   POSTINC2, F                     ;add to accumulator, and move ptr
00030A 50F4           00724         movf    PRODH,W                         ;load high result byte
00030C 22??           00725         addwfc  CarryByte, F            ;add to carry byte, along with
                      00726                                                                 ;  any carry from previous addition
                      00727 
                      00728         ; See if A loop is done
00030E 04E9           00729         decf    FSR0L, W
000310 18??           00730         xorwf   _xA+0x0, W
000312 E1??           00731         bnz             mRLoopA
                      00732 
                      00733         ; If A loop is done, finish out the carrying
000314 C??? FFDF      00734         movff   CarryByte, INDF2                ;save carry byte (always adding to zero)
                      00735 
                      00736         ; See if B loop is done
000318 50??           00737         movf    _xBr+0x0, W
00031A 18F6           00738         xorwf   TBLPTRL, W
00031C E1??           00739         bnz             mRLoadB
                      00740 
00031E                00741 mRDone:
                      00742         Stk2PopToReg    FSR2L           ;restore old FSR2
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
00031E 0EFF               M           movlw     0xFF
000320 CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
000324 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000326 0EFF               M           movlw     0xFF
000328 CFE3 FFD9          M           movff     PLUSW1,FSR2L
00032C 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
00032E 0012           00743         return
                      00744 
                      00745 
                      00746 ;***************************************************************************
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00747 ; Function:     void _sqrBI()
                      00748 ;
                      00749 ; PreCondition: _iA is loaded with the LSB of the BigInt
                      00750 ;                               _xA is loaded with the MSB of the BigInt
                      00751 ;                               _iR is the LSB of the accumulator BigInt
                      00752 ;                               _iR is zeroed, and has enough space
                      00753 ;
                      00754 ; Input:                A: Source BigInt to square
                      00755 ;                               R: Output location
                      00756 ;
                      00757 ; Output:               R = A * A
                      00758 ;
                      00759 ; Side Effects: None
                      00760 ;
                      00761 ; Stack Req:    6 bytes
                      00762 ;
                      00763 ; Overview:     Performs the bulk multiplication of two BigInts
                      00764 ;***************************************************************************
  0000                00765         GLOBAL  _sqrBI
000330                00766 _sqrBI:
                      00767     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000330 CFD9 FFE6          M           movff     FSR2L,POSTINC1
000334 CFDA FFE6          M           movff     FSR2L+1,POSTINC1
000338 010?           00768         banksel _iA                                     ;select the assembly pointer bank
                      00769 
                      00770         ;decement iA (to set up for termination case)
00033A 6AE8           00771         clrf    WREG                            ;load zero to W
00033C 06??           00772         decf    _iA,F                           ;decrement iA
00033E 5A??           00773         subwfb  _iA+0x1,F                       ;borrow if needed
                      00774 
                      00775         ;set up for outer loop over all values of A
                      00776         Stk2PushFromReg _iR                     ;save initial iR to stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000340 C??? FFE6          M           movff     _iR,POSTINC1
000344 C??? FFE6          M           movff     _iR+1,POSTINC1
                      00777         Stk2PushFromReg _iA                     ;save initial iA to stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000348 C??? FFE6          M           movff     _iA,POSTINC1
00034C C??? FFE6          M           movff     _iA+1,POSTINC1
                      00778 
000350                00779 qOuterLoop:
                      00780         Stk2PopToReg    FSR0L           ;pop next iA from stack
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
000350 0EFF               M           movlw     0xFF
000352 CFE3 FFEA          M           movff     PLUSW1,FSR0L+1
000356 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000358 0EFF               M           movlw     0xFF
00035A CFE3 FFE9          M           movff     PLUSW1,FSR0L
00035E 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00781         Stk2PopToReg    FSR2L           ;pop next iR from stack
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M   ; WREG changed.
000360 0EFF               M           movlw     0xFF
000362 CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
000366 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
000368 0EFF               M           movlw     0xFF
00036A CFE3 FFD9          M           movff     PLUSW1,FSR2L
00036E 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
                      00782 
                      00783         ;check if outer loop is done
000370 50E9           00784         movf    FSR0L,W                         ;check if low byte of A ptr
000372 18??           00785         xorwf   _xA+0x0,W                       ;  equals low byte of stop ptr
000374 E1??           00786         bnz             qNextOut                        ;if not, work on next byte of A
000376 50EA           00787         movf    FSR0H,W                         ;check if high byte of A ptr
000378 18??           00788         xorwf   _xA+0x1,W                       ;  equals high byte of stop ptr
00037A E0??           00789         bz              qDone                           ;if so, terminate
                      00790 
00037C                00791 qNextOut:
                      00792         ;save next value of iR
00037C 50DC           00793         movf    PREINC2,W                       ;decrement iR twice for next value
00037E 50DC           00794         movf    PREINC2,W
                      00795         Stk2PushFromReg FSR2L           ;save next value of iR to stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000380 CFD9 FFE6          M           movff     FSR2L,POSTINC1
000384 CFDA FFE6          M           movff     FSR2L+1,POSTINC1
000388 50DD           00796         movf    POSTDEC2,W                      ;restore iR value
00038A 50DD           00797         movf    POSTDEC2,W
                      00798 
                      00799         ;save next value of iA
00038C 50EC           00800         movf    PREINC0,W                       ;decrement iA for next value
                      00801         Stk2PushFromReg FSR0L           ;save next value of iA to stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
00038E CFE9 FFE6          M           movff     FSR0L,POSTINC1
000392 CFEA FFE6          M           movff     FSR0L+1,POSTINC1
                      00802 
                      00803         ;load wC with value of A[iA--]
                      00804         ;check wC==0, if so then we can skip this byte
000396 50ED           00805         movf    POSTDEC0,W                      ;restore iA and copy value
000398 E0??           00806         bz              qOuterLoop                      ;if B==0, continue to next byte
00039A 6E??           00807         movwf   _wC                                     ;  into temporary byte
                      00808         
                      00809         ;set up for inner loop over all remaining values in A
00039C 6A??           00810         clrf    CarryByte                       ;clear carry bytes
00039E 6A??           00811         clrf    CarryH
                      00812 
                      00813         ;first result only gets accumulated once
0003A0 02EC           00814         mulwf   PREINC0                         ;square first byte (W = B above)
0003A2 50F3           00815         movf    PRODL,W                         ;load PRODL
0003A4 26DE           00816         addwf   POSTINC2,F                      ;accumulate
0003A6 50F4           00817         movf    PRODH,W                         ;load PRODH
0003A8 22??           00818         addwfc  CarryByte,F                     ;save carry byte (with prev carry)
                      00819 
0003AA                00820 qInnerLoop:
                      00821         ;if A isn't complete, keep looping
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003AA 50E9           00822         movf    FSR0L,W                         ;check if low byte of A ptr
0003AC 18??           00823         xorwf   _xA+0x0,W                       ;  equals low byte of stop ptr
0003AE E1??           00824         bnz             qInnerByte                      ;if not, continue looping
0003B0 50EA           00825         movf    FSR0H,W                         ;check if high byte of A ptr
0003B2 18??           00826         xorwf   _xA+0x1,W                       ;  equals high byte of stop ptr
0003B4 E0??           00827         bz              qInnerDone                      ;if not, continue looping
                      00828 
0003B6                00829 qInnerByte:
                      00830         ;all future bytes get accumulated twice
0003B6 50??           00831         movf    CarryByte,W                     ;load carry byte
0003B8 26DF           00832         addwf   INDF2,F                         ;add to accumulator
0003BA C??? F???      00833         movff   CarryH,CarryByte        ;move high carry byte down
0003BE 6A??           00834         clrf    CarryH
0003C0 B0D8           00835         btfsc   STATUS,C                        ;if a carry occurred
0003C2 2A??           00836         incf    CarryByte,F                     ;  add 1 to the carry byte
0003C4 50??           00837         movf    _wC,W                           ;load B
0003C6 02EC           00838         mulwf   PREINC0                         ;calculate B * A[iA--]
0003C8 90D8           00839         bcf             STATUS,C                        ;multiply product by 2
0003CA 36F3           00840         rlcf    PRODL,F                         
0003CC 36F4           00841         rlcf    PRODH,F
0003CE B0D8           00842         btfsc   STATUS,C                        ;if a carry occurrs
0003D0 2A??           00843         incf    CarryH,F                        ;  save 1 to the CarryH byte
0003D2 50F3           00844         movf    PRODL,W                         ;load low result byte
0003D4 26DE           00845         addwf   POSTINC2,F                      ;add to accumulator, and move ptr
0003D6 50F4           00846         movf    PRODH,W                         ;load high result byte
0003D8 22??           00847         addwfc  CarryByte,F                     ;add to carry byte, along with
                      00848                                                                 ;  any carry from previous addition
0003DA B0D8           00849         btfsc   STATUS,C                        ;if a carry occurrs
0003DC 2A??           00850         incf    CarryH,F                        ;  save 1 to the CarryH byte
0003DE D???           00851         bra             qInnerLoop
                      00852         
                      00853 
0003E0                00854 qInnerDone
                      00855         ;A is complete, finish out the carrying
0003E0 50??           00856         movf    CarryByte,W                     ;accumulate the carry bytes
0003E2 26DE           00857         addwf   POSTINC2,F
0003E4 50??           00858         movf    CarryH,W
0003E6 22DF           00859         addwfc  INDF2
0003E8 D???           00860         bra             qOuterLoop
                      00861 
0003EA                00862 qDone:
                      00863         ;movff  FSR2L,_iR+0x0
                      00864         ;movff  FSR2H,_iR+0x1
                      00865         Stk2PopToReg    FSR2L           ;restore old FSR2
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
0003EA 0EFF               M           movlw     0xFF
0003EC CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
0003F0 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0003F2 0EFF               M           movlw     0xFF
0003F4 CFE3 FFD9          M           movff     PLUSW1,FSR2L
0003F8 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0003FA 0012           00866         return
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00867 
                      00868 
                      00869 ;***************************************************************************
                      00870 ; Function:     void _masBI()
                      00871 ;
                      00872 ; PreCondition: _iB is loaded with the LSB of the modulus BigInt
                      00873 ;                               _xB is loaded with the MSB of the modulus BigInt
                      00874 ;                               _wC is loaded with the 8 bit integer by which to multiply
                      00875 ;                               _iR is the starting LSB of the decumulator BigInt
                      00876 ;                               B must be 256 bytes or less
                      00877 ;
                      00878 ; Input:                B: a BigInt to multiply with wC
                      00879 ;                               wC: a simple scalar
                      00880 ;                               R: a BigInt decumulator to subtract the result from
                      00881 ;
                      00882 ; Output:               R = R - (B * wC)
                      00883 ;
                      00884 ; Side Effects: None
                      00885 ;
                      00886 ; Stack Req:    2 bytes
                      00887 ;
                      00888 ; Overview:     Performs a Multiply And Subtract function.  This is used in
                      00889 ;                               the modulus calculation.
                      00890 ;
                      00891 ; Note:                 As an optimization, the final borrow forward propagation 
                      00892 ;                               is commented out below.  This results in an a potentially 
                      00893 ;                               incorrect result in R, but for the BigIntMod() algorithm, 
                      00894 ;                               the final borrow forward propagation would be both unneeded 
                      00895 ;                               and unwanted.  For BigIntMod(), this underflow is repaired 
                      00896 ;                               by adding B back into R one or two times.
                      00897 ;***************************************************************************
  0000                00898         GLOBAL  _masBI
0003FC                00899 _masBI:
                      00900     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
0003FC CFD9 FFE6          M           movff     FSR2L,POSTINC1
000400 CFDA FFE6          M           movff     FSR2L+1,POSTINC1
000404 010?           00901         banksel _xB                                     ;select the assembly pointer bank
                      00902         
                      00903         ; Load B pointer into FSR2 and R pointer into FSR0
000406 C??? FFE9      00904         movff   _iR+0x0, FSR0L          ;load iR into FSR0
00040A C??? FFEA      00905         movff   _iR+0x1, FSR0H
00040E C??? FFD9      00906         movff   _iB+0x0, FSR2L          ;load iB into FSR2
000412 C??? FFDA      00907         movff   _iB+0x1, FSR2H
                      00908         
                      00909         ; Predecrement B pointer
000416 50DD           00910         movf    POSTDEC2, W     
                      00911         
                      00912         ; Calculate loop counters for /4 and /1
000418                00913 masLoop4Init:
000418 6A??           00914         clrf    CarryByte
00041A 50D9           00915         movf    FSR2L, W
00041C 5C??           00916         subwf   _xB+0x0, W
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00041E 90D8           00917         bcf             STATUS, C
000420 30E8           00918         rrcf    WREG, W
000422 36??           00919         rlcf    CarryByte
000424 30E8           00920         rrcf    WREG, W
000426 B0D8           00921         btfsc   STATUS, C
000428 82??           00922         bsf             CarryByte, 1
00042A 6E??           00923         movwf   CarryH
                      00924 
00042C 52??           00925         movf    CarryH, F
00042E E0??           00926         bz              masLoopInit             
                      00927 
000430 6AE8           00928         clrf    WREG
                      00929 
000432                00930 masLoop4:
000432 5EEF           00931         subwf   INDF0, F                        ;subtract from decumulator
000434 50??           00932         movf    _wC, W                          ;load B
000436 02DC           00933         mulwf   PREINC2                         ;calculate wC * B[iB--]
000438 A0D8           00934         btfss   STATUS, C                       ;if a borrow occurred
00043A 2AF4           00935         incf    PRODH, F                        ;  save 1 to the carry byte
00043C 50F3           00936         movf    PRODL, W                        ;load low result byte
00043E 5EEE           00937         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000440 50F4           00938         movf    PRODH, W
000442 A0D8           00939         btfss   STATUS, C
000444 28F4           00940         incf    PRODH, W
                      00941 
000446 5EEF           00942         subwf   INDF0, F                        ;subtract from decumulator
000448 50??           00943         movf    _wC, W                          ;load B
00044A 02DC           00944         mulwf   PREINC2                         ;calculate wC * B[iB--]
00044C A0D8           00945         btfss   STATUS, C                       ;if a borrow occurred
00044E 2AF4           00946         incf    PRODH, F                        ;  save 1 to the carry byte
000450 50F3           00947         movf    PRODL, W                        ;load low result byte
000452 5EEE           00948         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000454 50F4           00949         movf    PRODH, W
000456 A0D8           00950         btfss   STATUS, C
000458 28F4           00951         incf    PRODH, W
                      00952 
00045A 5EEF           00953         subwf   INDF0, F                        ;subtract from decumulator
00045C 50??           00954         movf    _wC, W                          ;load B
00045E 02DC           00955         mulwf   PREINC2                         ;calculate wC * B[iB--]
000460 A0D8           00956         btfss   STATUS, C                       ;if a borrow occurred
000462 2AF4           00957         incf    PRODH, F                        ;  save 1 to the carry byte
000464 50F3           00958         movf    PRODL, W                        ;load low result byte
000466 5EEE           00959         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000468 50F4           00960         movf    PRODH, W
00046A A0D8           00961         btfss   STATUS, C
00046C 28F4           00962         incf    PRODH, W
                      00963         
00046E 5EEF           00964         subwf   INDF0, F                        ;subtract from decumulator
000470 50??           00965         movf    _wC, W                          ;load B
000472 02DC           00966         mulwf   PREINC2                         ;calculate wC * B[iB--]
000474 A0D8           00967         btfss   STATUS, C                       ;if a borrow occurred
000476 2AF4           00968         incf    PRODH, F                        ;  save 1 to the carry byte
000478 50F3           00969         movf    PRODL, W                        ;load low result byte
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00047A 5EEE           00970         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
00047C 50F4           00971         movf    PRODH, W
00047E A0D8           00972         btfss   STATUS, C
000480 28F4           00973         incf    PRODH, W
                      00974         
                      00975         ; See if we've looped through all (B bytes)/4
000482 2E??           00976         decfsz  CarryH, F
000484 D???           00977         bra             masLoop4
                      00978 
                      00979 
000486                00980 masLoopInit:
000486 52??           00981         movf    CarryByte, F
000488 E0??           00982         bz              masFinalBorrow          
                      00983 
00048A                00984 masLoop:
00048A 5EEF           00985         subwf   INDF0, F                        ;subtract from decumulator
00048C 50??           00986         movf    _wC, W                          ;load B
00048E 02DC           00987         mulwf   PREINC2                         ;calculate wC * B[iB--]
000490 A0D8           00988         btfss   STATUS, C                       ;if a borrow occurred
000492 2AF4           00989         incf    PRODH, F                        ;  save 1 to the carry byte
000494 50F3           00990         movf    PRODL, W                        ;load low result byte
000496 5EEE           00991         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000498 50F4           00992         movf    PRODH, W
00049A A0D8           00993         btfss   STATUS, C
00049C 28F4           00994         incf    PRODH, W
                      00995 
                      00996         ; See if we've looped through all B bytes in the residual
00049E 2E??           00997         decfsz  CarryByte, F
0004A0 D???           00998         bra             masLoop
                      00999 
                      01000         ; If B is complete, finish out the borrow and return
0004A2                01001 masFinalBorrow:
0004A2 5EEE           01002         subwf   POSTINC0, F
                      01003 
                      01004         Stk2PopToReg    FSR2L           ;restore old FSR2
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
0004A4 0EFF               M           movlw     0xFF
0004A6 CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
0004AA 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0004AC 0EFF               M           movlw     0xFF
0004AE CFE3 FFD9          M           movff     PLUSW1,FSR2L
0004B2 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0004B4 0012           01005         return
                      01006 
                      01007 
                      01008 ;***************************************************************************
                      01009 ; Function:     void _masBIROM()
                      01010 ;
                      01011 ; PreCondition: _iBr is loaded with the LSB of the modulus BigInt
                      01012 ;                               _xBr is loaded with the MSB of the modulus BigInt
                      01013 ;                               _wC is loaded with the 8 bit integer by which to multiply
                      01014 ;                               _iR is the starting LSB of the decumulator BigInt
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01015 ;                               Br must be 256 bytes or less
                      01016 ;
                      01017 ; Input:                Br: a BigInt in ROM to multiply with wC
                      01018 ;                               wC: a simple scalar
                      01019 ;                               R: a BigInt decumulator in RAM to subtract the result from
                      01020 ;
                      01021 ; Output:               R = R - (Br * wC)
                      01022 ;
                      01023 ; Side Effects: Overwrites TBLPTRU:TBLPTRH:TBLPTRL
                      01024 ;
                      01025 ; Stack Req:    None
                      01026 ;
                      01027 ; Overview:     Performs a Multiply And Subtract function.  This is used in
                      01028 ;                               the modulus calculation.
                      01029 ;
                      01030 ; Note:                 As an optimization, the final borrow forward propagation 
                      01031 ;                               is commented out below.  This results in an a potentially 
                      01032 ;                               incorrect result in R, but for the BigIntMod() algorithm, 
                      01033 ;                               the final borrow forward propagation would be both unneeded 
                      01034 ;                               and unwanted.  For BigIntMod(), this underflow is repaired 
                      01035 ;                               by adding B back into R one or two times.
                      01036 ;***************************************************************************
  0000                01037         GLOBAL  _masBIROM
0004B6                01038 _masBIROM:
0004B6 010?           01039         banksel _xB                                     ;select the assembly pointer bank
                      01040         
                      01041         ; Load B pointer into TBLPTR and R pointer into FSR0
0004B8 C??? FFE9      01042         movff   _iR+0x0, FSR0L          ;load iR into FSR0
0004BC C??? FFEA      01043         movff   _iR+0x1, FSR0H
0004C0 C??? FFF6      01044         movff   _iBr+0x0, TBLPTRL       ;load iBr into TBLPTR
0004C4 C??? FFF7      01045         movff   _iBr+0x1, TBLPTRH
0004C8 C??? FFF8      01046         movff   _iBr+0x2, TBLPTRU
                      01047         
                      01048         ; Predecrement Br pointer and set up carry byte
0004CC 000A           01049         tblrd*-
                      01050 
                      01051         ; Calculate loop counters for /4 and /1
0004CE                01052 masRLoop4Init:
0004CE 6A??           01053         clrf    CarryByte
0004D0 50F6           01054         movf    TBLPTRL, W
0004D2 5C??           01055         subwf   _xBr+0x0, W
0004D4 90D8           01056         bcf             STATUS, C
0004D6 30E8           01057         rrcf    WREG, W
0004D8 36??           01058         rlcf    CarryByte
0004DA 30E8           01059         rrcf    WREG, W
0004DC B0D8           01060         btfsc   STATUS, C
0004DE 82??           01061         bsf             CarryByte, 1
0004E0 6E??           01062         movwf   CarryH
                      01063 
0004E2 52??           01064         movf    CarryH, F
0004E4 E0??           01065         bz              masRLoopInit            
                      01066 
0004E6 6AE8           01067         clrf    WREG
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01068 
0004E8                01069 masRLoop4:
0004E8 5EEF           01070         subwf   INDF0, F                        ;subtract from decumulator
0004EA 50??           01071         movf    _wC, W                          ;load B
0004EC 000B           01072         tblrd+*
0004EE 02F5           01073         mulwf   TABLAT                          ;calculate wC * B[iB--]
0004F0 A0D8           01074         btfss   STATUS, C                       ;if a borrow occurred
0004F2 2AF4           01075         incf    PRODH, F                        ;  save 1 to the carry byte
0004F4 50F3           01076         movf    PRODL, W                        ;load low result byte
0004F6 5EEE           01077         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
0004F8 50F4           01078         movf    PRODH, W
0004FA A0D8           01079         btfss   STATUS, C
0004FC 28F4           01080         incf    PRODH, W
                      01081 
0004FE 5EEF           01082         subwf   INDF0, F                        ;subtract from decumulator
000500 50??           01083         movf    _wC, W                          ;load B
000502 000B           01084         tblrd+*
000504 02F5           01085         mulwf   TABLAT                          ;calculate wC * B[iB--]
000506 A0D8           01086         btfss   STATUS, C                       ;if a borrow occurred
000508 2AF4           01087         incf    PRODH, F                        ;  save 1 to the carry byte
00050A 50F3           01088         movf    PRODL, W                        ;load low result byte
00050C 5EEE           01089         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
00050E 50F4           01090         movf    PRODH, W
000510 A0D8           01091         btfss   STATUS, C
000512 28F4           01092         incf    PRODH, W
                      01093 
000514 5EEF           01094         subwf   INDF0, F                        ;subtract from decumulator
000516 50??           01095         movf    _wC, W                          ;load B
000518 000B           01096         tblrd+*
00051A 02F5           01097         mulwf   TABLAT                          ;calculate wC * B[iB--]
00051C A0D8           01098         btfss   STATUS, C                       ;if a borrow occurred
00051E 2AF4           01099         incf    PRODH, F                        ;  save 1 to the carry byte
000520 50F3           01100         movf    PRODL, W                        ;load low result byte
000522 5EEE           01101         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000524 50F4           01102         movf    PRODH, W
000526 A0D8           01103         btfss   STATUS, C
000528 28F4           01104         incf    PRODH, W
                      01105 
00052A 5EEF           01106         subwf   INDF0, F                        ;subtract from decumulator
00052C 50??           01107         movf    _wC, W                          ;load B
00052E 000B           01108         tblrd+*
000530 02F5           01109         mulwf   TABLAT                          ;calculate wC * B[iB--]
000532 A0D8           01110         btfss   STATUS, C                       ;if a borrow occurred
000534 2AF4           01111         incf    PRODH, F                        ;  save 1 to the carry byte
000536 50F3           01112         movf    PRODL, W                        ;load low result byte
000538 5EEE           01113         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
00053A 50F4           01114         movf    PRODH, W
00053C A0D8           01115         btfss   STATUS, C
00053E 28F4           01116         incf    PRODH, W
                      01117         
                      01118         ; See if we've looped through all B bytes
000540 2E??           01119         decfsz  CarryH, F
000542 D???           01120         bra             masRLoop4
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01121 
                      01122 
000544                01123 masRLoopInit:
000544 52??           01124         movf    CarryByte, F
000546 E0??           01125         bz              masRFinalBorrow         
                      01126 
000548                01127 masRLoop:
000548 5EEF           01128         subwf   INDF0, F                        ;subtract from decumulator
00054A 50??           01129         movf    _wC, W                          ;load B
00054C 000B           01130         tblrd+*
00054E 02F5           01131         mulwf   TABLAT                          ;calculate wC * B[iB--]
000550 A0D8           01132         btfss   STATUS, C                       ;if a borrow occurred
000552 2AF4           01133         incf    PRODH, F                        ;  save 1 to the carry byte
000554 50F3           01134         movf    PRODL, W                        ;load low result byte
000556 5EEE           01135         subwf   POSTINC0, F                     ;subtract from decumulator, and move ptr
000558 50F4           01136         movf    PRODH, W
00055A A0D8           01137         btfss   STATUS, C
00055C 28F4           01138         incf    PRODH, W
                      01139         
                      01140         ; See if we've looped through all B bytes in the residual
00055E 2E??           01141         decfsz  CarryByte, F
000560 D???           01142         bra             masRLoop
                      01143 
                      01144         ; If B is complete, finish out the borrow and return
000562                01145 masRFinalBorrow:
000562 5EEE           01146         subwf   POSTINC0, F
                      01147 
000564 0012           01148         return
                      01149         
                      01150 
                      01151 ;***************************************************************************
                      01152 ; Function:     void _copyBI()
                      01153 ;
                      01154 ; PreCondition: _iA and _iB are loaded with the LSB of each BigInt
                      01155 ;                               _xA and _xB are loaded with the MSB of each BigInt
                      01156 ;                               B must be 256 bytes or less
                      01157 ;
                      01158 ; Input:                A: the destination
                      01159 ;                               B: the source
                      01160 ;
                      01161 ; Output:               A = B
                      01162 ;
                      01163 ; Side Effects: None
                      01164 ;
                      01165 ; Stack Req:    2 bytes
                      01166 ;
                      01167 ; Overview:     Copies a value from BigInt B into BigInt A.  If A has more 
                      01168 ;                               bytes allocated than B, then the most significant bytes in 
                      01169 ;                               A are zero padded.  If A has less bytes allocated than B, 
                      01170 ;                               then the most significant bytes are truncated off in A.
                      01171 ;***************************************************************************
  0000                01172         GLOBAL  _copyBI
000566                01173 _copyBI:
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01174     Stk2PushFromReg FSR2L               ;Save FSR2 on the stack
                          M   ; Get two bytes from Reg and push on stack.  WREG unchanged.
000566 CFD9 FFE6          M           movff     FSR2L,POSTINC1
00056A CFDA FFE6          M           movff     FSR2L+1,POSTINC1
00056E 010?           01175         banksel _xA                                     ;select the assembly pointer bank
                      01176 
                      01177         ;Load and predecrement iA, iB (to set up termination case)
000570 C??? FFE9      01178         movff   _iA+0x0, FSR0L          ;load iA into FSR0
000574 C??? FFEA      01179         movff   _iA+0x1, FSR0H
000578 C??? FFD9      01180         movff   _iB+0x0, FSR2L          ;load iB into FSR2
00057C C??? FFDA      01181         movff   _iB+0x1, FSR2H
000580 50ED           01182         movf    POSTDEC0, W
000582 50DD           01183         movf    POSTDEC2, W
                      01184         
000584                01185 cLoop:
000584 CFDC FFEC      01186         movff   PREINC2, PREINC0        ;copy B to A
000588 50D9           01187         movf    FSR2L, W                        ;check if low byte of B ptr
00058A 18??           01188         xorwf   _xB+0x0, W                      ;  equals low byte of stop ptr
00058C E0??           01189         bz              cZeroTest                       ;if so, B is done, so clear rest of A
                      01190 
00058E 50E9           01191         movf    FSR0L, W                        ;check if low byte of A ptr
000590 18??           01192         xorwf   _xA+0x0, W                      ;  equals low byte of stop ptr
000592 E1??           01193         bnz             cLoop                           ;if not, continue
000594 50EA           01194         movf    FSR0H, W                        ;check if high byte of A ptr
000596 18??           01195         xorwf   _xA+0x1, W                      ;  equals high byte of stop ptr
000598 E1??           01196         bnz             cLoop                           ;if so, terminate
                      01197 
00059A D???           01198         bra             cZeroTest
                      01199 
00059C                01200 cZero:
00059C 6AEC           01201         clrf    PREINC0                         ;set A byte to zero
                      01202 
00059E                01203 cZeroTest:
00059E 50E9           01204         movf    FSR0L, W                        ;check if low byte of A ptr
0005A0 18??           01205         xorwf   _xA+0x0, W                      ;  equals low byte of stop ptr
0005A2 E1??           01206         bnz             cZero                           ;if not, continue
0005A4 50EA           01207         movf    FSR0H, W                        ;check if high byte of A ptr
0005A6 18??           01208         xorwf   _xA+0x1, W                      ;  equals high byte of stop ptr
0005A8 E1??           01209         bnz             cZero                           ;if so, terminate
                      01210 
                      01211         Stk2PopToReg    FSR2L           ;restore old FSR2
                          M   ; Pop two bytes from stack and put them at Reg without exposing stack.
                          M   ; WREG changed.
0005AA 0EFF               M           movlw     0xFF
0005AC CFE3 FFDA          M           movff     PLUSW1,FSR2L+1
0005B0 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0005B2 0EFF               M           movlw     0xFF
0005B4 CFE3 FFD9          M           movff     PLUSW1,FSR2L
0005B8 52E5               M           movf      POSTDEC1,F,ACCESS     ; decrement FSR1
0005BA 0012           01212         return
                      01213 
                      01214 
                      01215   end
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
AD0                               00000000
AD1                               00000001
AD10                              00000002
AD11                              00000003
AD12                              00000004
AD13                              00000005
AD14                              00000006
AD15                              00000007
AD16                              00000000
AD17                              00000001
AD18                              00000002
AD19                              00000003
AD2                               00000002
AD3                               00000003
AD4                               00000004
AD5                               00000005
AD6                               00000006
AD7                               00000007
AD8                               00000000
AD9                               00000001
ADCAL                             00000007
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADMSK1                            00000001
ADMSK2                            00000002
ADMSK3                            00000003
ADMSK4                            00000004
ADMSK5                            00000005
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ALE                               00000000
AN0                               00000000
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

AN1                               00000001
AN10                              00000005
AN11                              00000006
AN12                              00000004
AN13                              00000005
AN14                              00000006
AN15                              00000007
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000003
AN9                               00000004
ANDOR                             00000006
AUTOINC                           00000007
BA0                               00000004
BANKED                            00000001
BAUDCON                           00000F7E
BAUDCON1                          00000F7E
BAUDCON2                          00000F7C
BAUDCTL                           00000F7E
BAUDCTL1                          00000F7E
BAUDCTL2                          00000F7C
BCEN                              00000000
BCL1IE                            00000003
BCL1IF                            00000003
BCL1IP                            00000003
BCL2IE                            00000006
BCL2IF                            00000006
BCL2IP                            00000006
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
BUFER                             00000006
BUSY                              00000000
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCP2_PORTE                        00000007
CCP3                              00000000
CCP3CON                           00000FB7
CCP3IE                            00000000
CCP3IF                            00000000
CCP3IP                            00000000
CCP3M0                            00000000
CCP3M1                            00000001
CCP3M2                            00000002
CCP3M3                            00000003
CCP3X                             00000005
CCP3Y                             00000004
CCP4                              00000003
CCP4CON                           00000F73
CCP4IE                            00000001
CCP4IF                            00000001
CCP4IP                            00000001
CCP4M0                            00000000
CCP4M1                            00000001
CCP4M2                            00000002
CCP4M3                            00000003
CCP4X                             00000005
CCP4Y                             00000004
CCP5                              00000004
CCP5CON                           00000F70
CCP5IE                            00000002
CCP5IF                            00000002
CCP5IP                            00000002
CCP5M0                            00000000
CCP5M1                            00000001
CCP5M2                            00000002
CCP5M3                            00000003
CCP5X                             00000005
CCP5Y                             00000004
CCPR1                             00000FBE
CCPR1H                            00000FBF
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CCPR3                             00000FB8
CCPR3H                            00000FB9
CCPR3L                            00000FB8
CCPR4                             00000F74
CCPR4H                            00000F75
CCPR4L                            00000F74
CCPR5                             00000F71
CCPR5H                            00000F72
CCPR5L                            00000F71
CE                                00000005
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CK1                               00000006
CK2                               00000001
CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CRCEN                             00000005
CREN                              00000004
CS                                00000002
CSRC                              00000007
CSUMEN                            00000004
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF                             00000005
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CarryByte                         00000011
CarryH                            00000012
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

DC2B0                             00000004
DC2B1                             00000005
DC3B0                             00000004
DC3B1                             00000005
DC4B0                             00000004
DC4B1                             00000005
DC5B0                             00000004
DC5B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DDRF                              00000F97
DDRG                              00000F98
DDRH                              00000F99
DDRJ                              00000F9A
DEFER                             00000006
DMAIE                             00000005
DMAIF                             00000005
DMAST                             00000005
DONE                              00000001
DT1                               00000007
DT2                               00000002
D_A                               00000005
EBDIS                             00000007
ECCP1                             00000002
ECCP1AS                           00000FB6
ECCP1AS0                          00000004
ECCP1AS1                          00000005
ECCP1AS2                          00000006
ECCP1ASE                          00000007
ECCP1CON                          00000FBD
ECCP1DEL                          00000F79
ECCP2AS                           00000F68
ECCP2AS0                          00000004
ECCP2AS1                          00000005
ECCP2AS2                          00000006
ECCP2ASE                          00000007
ECCP2CON                          00000FBA
ECCP2DEL                          00000F67
ECCP2_PORTB                       00000003
ECCP2_PORTC                       00000001
ECCP2_PORTE                       00000007
ECCP3                             00000000
ECCP3AS                           00000F6A
ECCP3AS0                          00000004
ECCP3AS1                          00000005
ECCP3AS2                          00000006
ECCP3ASE                          00000007
ECCP3CON                          00000FB7
ECCP3DEL                          00000F69
ECCPAS0                           00000004
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
ECON1                             00000FD2
ECON2                             00000EFE
EDATA                             00000F61
EDATA0                            00000000
EDATA1                            00000001
EDATA2                            00000002
EDATA3                            00000003
EDATA4                            00000004
EDATA5                            00000005
EDATA6                            00000006
EDATA7                            00000007
EDMACS                            00000EF6
EDMACSH                           00000EF7
EDMACSL                           00000EF6
EDMADST                           00000EF4
EDMADSTH                          00000EF5
EDMADSTL                          00000EF4
EDMAND                            00000EF2
EDMANDH                           00000EF3
EDMANDL                           00000EF2
EDMAST                            00000EF0
EDMASTH                           00000EF1
EDMASTL                           00000EF0
EECON1                            00000FA6
EECON2                            00000FA7
EFLOCON                           00000E97
EHT0                              00000EC0
EHT1                              00000EC1
EHT2                              00000EC2
EHT3                              00000EC3
EHT4                              00000EC4
EHT5                              00000EC5
EHT6                              00000EC6
EHT7                              00000EC7
EIE                               00000EFB
EIR                               00000F60
EPAUS                             00000E98
EPAUSH                            00000E99
EPAUSL                            00000E98
EPKTCNT                           00000ED9
EPMCS                             00000ED0
EPMCSH                            00000ED1
EPMCSL                            00000ED0
EPMM0                             00000EC8
EPMM1                             00000EC9
EPMM2                             00000ECA
EPMM3                             00000ECB
EPMM4                             00000ECC
EPMM5                             00000ECD
EPMM6                             00000ECE
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

EPMM7                             00000ECF
EPMO                              00000ED4
EPMOH                             00000ED5
EPMOL                             00000ED4
ERDPT                             00000F7A
ERDPTH                            00000F7B
ERDPTL                            00000F7A
ERXFCON                           00000ED8
ERXND                             00000EEA
ERXNDH                            00000EEB
ERXNDL                            00000EEA
ERXRDPT                           00000EEC
ERXRDPTH                          00000EED
ERXRDPTL                          00000EEC
ERXST                             00000EE8
ERXSTH                            00000EE9
ERXSTL                            00000EE8
ERXWRPT                           00000EEE
ERXWRPTH                          00000EEF
ERXWRPTL                          00000EEE
ESTAT                             00000EFD
ETHEN                             00000005
ETHIE                             00000005
ETHIF                             00000005
ETHIP                             00000005
ETXND                             00000EE6
ETXNDH                            00000EE7
ETXNDL                            00000EE6
ETXST                             00000EE4
ETXSTH                            00000EE5
ETXSTL                            00000EE4
EWRPT                             00000EE2
EWRPTH                            00000EE3
EWRPTL                            00000EE2
FAST                              00000001
FCEN0                             00000000
FCEN1                             00000001
FERR                              00000002
FLT0                              00000000
FREE                              00000004
FRMLNEN                           00000001
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FULDPX                            00000000
FULDPXS                           00000002
GCEN                              00000007
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
HFRMEN                            00000002
HTEN                              00000002
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INT3                              00000003
INT3E                             00000005
INT3F                             00000002
INT3IE                            00000005
INT3IF                            00000002
INT3IP                            00000001
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTEDG3                           00000003
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LATE3                             00000003
LATE4                             00000004
LATE5                             00000005
LATE6                             00000006
LATE7                             00000007
LATF                              00000F8E
LATF0                             00000000
LATF1                             00000001
LATF2                             00000002
LATF3                             00000003
LATF4                             00000004
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

LATF5                             00000005
LATF6                             00000006
LATF7                             00000007
LATG                              00000F8F
LATG0                             00000000
LATG1                             00000001
LATG2                             00000002
LATG3                             00000003
LATG4                             00000004
LATG5                             00000005
LATG6                             00000006
LATG7                             00000007
LATH                              00000F90
LATH0                             00000000
LATH1                             00000001
LATH2                             00000002
LATH3                             00000003
LATH4                             00000004
LATH5                             00000005
LATH6                             00000006
LATH7                             00000007
LATJ                              00000F91
LATJ0                             00000000
LATJ1                             00000001
LATJ2                             00000002
LATJ3                             00000003
LATJ4                             00000004
LATJ5                             00000005
LATJ6                             00000006
LATJ7                             00000007
LB                                00000006
LEDA                              00000000
LEDB                              00000001
LINKIE                            00000004
LINKIF                            00000004
MAADR1                            00000E84
MAADR2                            00000E85
MAADR3                            00000E82
MAADR4                            00000E83
MAADR5                            00000E80
MAADR6                            00000E81
MABBIPG                           00000EA4
MACON1                            00000EA0
MACON3                            00000EA2
MACON4                            00000EA3
MAIPG                             00000EA6
MAIPGH                            00000EA7
MAIPGL                            00000EA6
MAMXFL                            00000EAA
MAMXFLH                           00000EAB
MAMXFLL                           00000EAA
MARXEN                            00000000
MCEN                              00000001
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

MEMCON                            00000F9C
MICMD                             00000EB2
MIIRD                             00000000
MIISCAN                           00000001
MIRD                              00000EB8
MIRDH                             00000EB9
MIRDL                             00000EB8
MIREGADR                          00000EB4
MISTAT                            00000E8A
MIWR                              00000EB6
MIWRH                             00000EB7
MIWRL                             00000EB6
MPEN                              00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CE                            00000005
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_LB                            00000006
NOT_OE                            00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000007
NOT_SS1                           00000007
NOT_SS2                           00000007
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_TX8                           00000006
NOT_UB                            00000007
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRH                           00000003
NOT_WRITE                         00000002
NOT_WRL                           00000002
NVALID                            00000002
OBF                               00000006
OE                                00000001
OERR                              00000001
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
P                                 00000004
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

P1DC0                             00000000
P1DC1                             00000001
P1DC2                             00000002
P1DC3                             00000003
P1DC4                             00000004
P1DC5                             00000005
P1DC6                             00000006
P1M0                              00000006
P1M1                              00000007
P1RSEN                            00000007
P2DC0                             00000000
P2DC1                             00000001
P2DC2                             00000002
P2DC3                             00000003
P2DC4                             00000004
P2DC5                             00000005
P2DC6                             00000006
P2M0                              00000006
P2M1                              00000007
P2RSEN                            00000007
P3DC0                             00000000
P3DC1                             00000001
P3DC2                             00000002
P3DC3                             00000003
P3DC4                             00000004
P3DC5                             00000005
P3DC6                             00000006
P3M0                              00000006
P3M1                              00000007
P3RSEN                            00000007
PADCFG0                           00000005
PADCFG1                           00000006
PADCFG2                           00000007
PASSALL                           00000001
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PGC                               00000006
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

PGD                               00000007
PHDREN                            00000003
PHYRDY                            00000000
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PKTDEC                            00000006
PKTIE                             00000006
PKTIF                             00000006
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
PMEN                              00000004
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORTF                             00000F85
PORTG                             00000F86
PORTH                             00000F87
PORTJ                             00000F88
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PPRE                              00000004
PPST0                             00000005
PPST1                             00000007
PR2                               00000FCB
PR4                               00000F77
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

PSP7                              00000007
PSPCON                            00000FB0
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSS1AC0                           00000002
PSS1AC1                           00000003
PSS1BD0                           00000000
PSS1BD1                           00000001
PSS2AC0                           00000002
PSS2AC1                           00000003
PSS2BD0                           00000000
PSS2BD1                           00000001
PSS3AC0                           00000002
PSS3AC1                           00000003
PSS3BD0                           00000000
PSS3BD1                           00000001
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC1IE                             00000005
RC1IF                             00000005
RC1IP                             00000005
RC2                               00000002
RC2IE                             00000005
RC2IF                             00000005
RC2IP                             00000005
RC3                               00000003
RC4                               00000004
RC5                               00000005
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCREG1                            00000FAE
RCREG2                            00000F6E
RCSTA                             00000FAB
RCSTA1                            00000FAB
RCSTA2                            00000F6B
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RDPU                              00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RE4                               00000004
RE5                               00000005
RE6                               00000006
RE7                               00000007
READ_WRITE                        00000002
REPU                              00000006
RF0                               00000000
RF1                               00000001
RF2                               00000002
RF3                               00000003
RF4                               00000004
RF5                               00000005
RF6                               00000006
RF7                               00000007
RG0                               00000000
RG1                               00000001
RG2                               00000002
RG3                               00000003
RG4                               00000004
RG5                               00000005
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

RG6                               00000006
RG7                               00000007
RH0                               00000000
RH1                               00000001
RH2                               00000002
RH3                               00000003
RH4                               00000004
RH5                               00000005
RH6                               00000006
RH7                               00000007
RI                                00000004
RJ0                               00000000
RJ1                               00000001
RJ2                               00000002
RJ3                               00000003
RJ4                               00000004
RJ5                               00000005
RJ6                               00000006
RJ7                               00000007
RJPU                              00000007
RSEN                              00000001
RX                                00000007
RX1                               00000007
RX2                               00000002
RX9                               00000006
RX9D                              00000000
RXBUSY                            00000002
RXDTP                             00000005
RXEN                              00000002
RXERIE                            00000000
RXERIF                            00000000
RXPAUS                            00000002
RXRST                             00000006
R_W                               00000002
S                                 00000003
SCAN                              00000001
SCK                               00000003
SCK1                              00000003
SCK2                              00000006
SCKP                              00000004
SCL                               00000003
SCL1                              00000003
SCL2                              00000006
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDA1                              00000004
SDA2                              00000005
SDI                               00000004
SDI1                              00000004
SDI2                              00000005
SDO                               00000005
SDO1                              00000005
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

SDO2                              00000004
SEN                               00000000
SENDB                             00000003
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRG1                            00000FAF
SPBRG2                            00000F6F
SPBRGH                            00000F7F
SPBRGH1                           00000F7F
SPBRGH2                           00000F7D
SPEN                              00000007
SREN                              00000005
SS                                00000007
SS1                               00000007
SS2                               00000007
SSP1ADD                           00000FC8
SSP1BUF                           00000FC9
SSP1CON1                          00000FC6
SSP1CON2                          00000FC5
SSP1IE                            00000003
SSP1IF                            00000003
SSP1IP                            00000003
SSP1STAT                          00000FC7
SSP2ADD                           00000F65
SSP2BUF                           00000F66
SSP2CON1                          00000F63
SSP2CON2                          00000F62
SSP2IE                            00000007
SSP2IF                            00000007
SSP2IP                            00000007
SSP2STAT                          00000F64
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
Stk1AddToFSR0                     
Stk1AddToFSR2                     
Stk1CpyFromFSR0                   
Stk1CpyFromFSR2                   
Stk1CpyFromReg                    
Stk1CpyToFSR0                     
Stk1CpyToFSR2                     
Stk1CpyToReg                      
Stk1Dec                           
Stk1Inc                           
Stk1Negate                        
Stk1NegateFSR2                    
Stk1PopToFSR0                     
Stk1PopToFSR2                     
Stk1PopToReg                      
Stk1PushFromFSR0                  
Stk1PushFromFSR2                  
Stk1PushFromReg                   
Stk1ShiftLeft                     
Stk1TestForZero                   
Stk2AddToFSR0                     
Stk2AddToFSR2                     
Stk2CpyFromFSR0                   
Stk2CpyFromFSR2                   
Stk2CpyFromReg                    
Stk2CpyToFSR0                     
Stk2CpyToFSR2                     
Stk2CpyToReg                      
Stk2Dec                           
Stk2Inc                           
Stk2Negate                        
Stk2NegateFSR2                    
Stk2PopToFSR0                     
Stk2PopToFSR2                     
Stk2PopToReg                      
Stk2PushFromFSR0                  
Stk2PushFromFSR2                  
Stk2PushFromReg                   
Stk2ShiftLeft                     
Stk2TestForZero                   
Stk3AddToFSR0                     
Stk3AddToFSR2                     
Stk3CpyFromFSR0                   
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

Stk3CpyFromReg                    
Stk3CpyToReg                      
Stk3Dec                           
Stk3Inc                           
Stk3PopToFSR0                     
Stk3PopToFSR2                     
Stk3PopToReg                      
Stk3PushFromFSR0                  
Stk3PushFromFSR2                  
Stk3PushFromReg                   
Stk3TestForZero                   
Stk4AddToFSR0                     
Stk4AddToFSR2                     
Stk4CpyFromFSR0                   
Stk4CpyFromFSR2                   
Stk4CpyToFSR2                     
Stk4Negate                        
Stk4ShiftLeft                     
StkAddStackPtr                    
StkPushPtrToOffset                
StkSetPtrToOffset                 
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

T3CON                             00000FB1
T3INSYNC                          00000002
T3SYNC                            00000002
T4CKPS0                           00000000
T4CKPS1                           00000001
T4CON                             00000F76
T4OUTPS0                          00000003
T4OUTPS1                          00000004
T4OUTPS2                          00000005
T4OUTPS3                          00000006
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TMR4                              00000F78
TMR4IE                            00000003
TMR4IF                            00000003
TMR4IP                            00000003
TMR4ON                            00000002
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRISE3                            00000003
TRISE4                            00000004
TRISE5                            00000005
TRISE6                            00000006
TRISE7                            00000007
TRISF                             00000F97
TRISF0                            00000000
TRISF1                            00000001
TRISF2                            00000002
TRISF3                            00000003
TRISF4                            00000004
TRISF5                            00000005
TRISF6                            00000006
TRISF7                            00000007
TRISG                             00000F98
TRISG0                            00000000
TRISG1                            00000001
TRISG2                            00000002
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

TRISG3                            00000003
TRISG4                            00000004
TRISG5                            00000005
TRISG6                            00000006
TRISG7                            00000007
TRISH                             00000F99
TRISH0                            00000000
TRISH1                            00000001
TRISH2                            00000002
TRISH3                            00000003
TRISH4                            00000004
TRISH5                            00000005
TRISH6                            00000006
TRISH7                            00000007
TRISJ                             00000F9A
TRISJ0                            00000000
TRISJ1                            00000001
TRISJ2                            00000002
TRISJ3                            00000003
TRISJ4                            00000004
TRISJ5                            00000005
TRISJ6                            00000006
TRISJ7                            00000007
TRMT                              00000001
TX                                00000006
TX1                               00000006
TX1IE                             00000004
TX1IF                             00000004
TX1IP                             00000004
TX2                               00000001
TX2IE                             00000004
TX2IF                             00000004
TX2IP                             00000004
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXABRT                            00000001
TXCKP                             00000004
TXCRCEN                           00000004
TXD8                              00000000
TXEN                              00000005
TXERIE                            00000001
TXERIF                            00000001
TXIE_EIE                          00000003
TXIE_PIE1                         00000004
TXIF_EIR                          00000003
TXIF_PIR1                         00000004
TXIP                              00000004
TXPAUS                            00000003
TXREG                             00000FAD
TXREG1                            00000FAD
TXREG2                            00000F6D
TXRST                             00000007
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

TXRTS                             00000003
TXSTA                             00000FAC
TXSTA1                            00000FAC
TXSTA2                            00000F6C
UA                                00000001
UB                                00000007
UCEN                              00000007
VCFG0                             00000004
VCFG1                             00000005
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WAIT0                             00000004
WAIT1                             00000005
WCOL                              00000007
WDTCON                            00000FD1
WM0                               00000000
WM1                               00000001
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRH                               00000003
WRL                               00000002
WUE                               00000001
Z                                 00000002
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
__18F97J60                        00000001
_addBI                            00000000
_addBIROM                         00000084
_copyBI                           00000566
_iA                               00000000
_iB                               00000004
_iBr                              00000008
_iR                               0000000E
_masBI                            000003FC
_masBIROM                         000004B6
_msbBI                            00000228
_mulBI                            00000248
_mulBIROM                         000002BC
_sqrBI                            00000330
_subBI                            00000106
_subBIROM                         0000018A
_wC                               00000010
_xA                               00000002
_xB                               00000006
_xBr                              0000000B
_zeroBI                           0000020C
aDo8Add                           00000030
aDoFinalCarry                     00000068
aDoResidualAdd                    0000005C
aDone                             00000072
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

aRDo8Add                          000000B0
aRDoFinalCarry                    000000FA
aRDoResidualAdd                   000000EC
aRDone                            00000104
aRTest8Add                        000000E4
aRTestResidualAdd                 000000F2
aTest8Add                         00000054
aTestResidualAdd                  00000060
cLoop                             00000584
cZero                             0000059C
cZeroTest                         0000059E
jmpClr                            
jmpFeqF                           
jmpFeqL                           
jmpFeqZ                           
jmpFgeL                           
jmpFleL                           
jmpFneF                           
jmpFneL                           
jmpFneZ                           
jmpSet                            
jmpWeqZ                           
jmpWneZ                           
mDone                             000002AA
mLoadB                            0000025C
mLoadBAgain                       00000266
mLoopA                            00000286
mRDone                            0000031E
mRLoadB                           000002DA
mRLoadBAgain                      000002DC
mRLoopA                           000002FA
masFinalBorrow                    000004A2
masLoop                           0000048A
masLoop4                          00000432
masLoop4Init                      00000418
masLoopInit                       00000486
masRFinalBorrow                   00000562
masRLoop                          00000548
masRLoop4                         000004E8
masRLoop4Init                     000004CE
masRLoopInit                      00000544
msbFound                          0000023E
msbLoop                           00000232
qDone                             000003EA
qInnerByte                        000003B6
qInnerDone                        000003E0
qInnerLoop                        000003AA
qNextOut                          0000037C
qOuterLoop                        00000350
sDo8Subtract                      00000136
sDoFinalCarry                     0000016E
sDoResidualSubtract               00000162
sDone                             00000178
MPASM  5.37                 BIGINT_HELPER.ASM   6-15-2016  15:45:55         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

sRDo8Subtract                     000001B6
sRDoFinalCarry                    00000200
sRDoResidualSubtract              000001F2
sRDone                            0000020A
sRTest8Subtract                   000001EA
sRTestResidualSubtract            000001F8
sTest8Subtract                    0000015A
sTestResidualSubtract             00000166
zLoop                             00000218

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

